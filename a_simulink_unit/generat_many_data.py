# coding=utf-8

"""
批量生成模拟数据
可在生成后删除.
"""
from datetime import datetime, timedelta
import os
import codecs
import time
import random

from faker import Faker
# from china_regions.data import provinces, get_cities_by_province, get_districts_by_city
import pandas
import numpy as np
import pandas as pd

def normal(size):
    arr = np.random.normal(size=size+1)
    arr = np.round(arr, decimals=2)
    return arr


def get(faker: Faker, mcfieldnamezh, mctablenamezh=''):
    """
    根据表字段的中文名修正为合适的生成方式
    扩展建议:
    根据字段名->实体名->枚举
    关联字段->同时生成多个字段
    """
    val = ''
    if 'ID' in mcfieldnamezh or '主键' in mcfieldnamezh or '唯一标识' in mcfieldnamezh:
        val = str(faker.uuid4())[:8]
        return val
    if '时间戳' == mcfieldnamezh:
        # val = str(int(time.mktime(faker.date_this_decade().timetuple())))
        # return val
        val = faker.date_between(
            start_date=datetime.now() - timedelta(days=3 * 4), end_date=datetime.now()
        )
        return val

    if '时间' in mcfieldnamezh:
        val = faker.date_between(start_date=datetime.now() - timedelta(days=3 * 4),
                                 end_date=datetime.now())
        return val
    if '日期' in mcfieldnamezh:
        val = faker.date_between(start_date=datetime.now() - timedelta(days=3 * 4),
                                 end_date=datetime.now())
        return val
    if '率' == mcfieldnamezh[-1]:
        val = int(normal(10)[faker.random.randint(0,10)])
        return val
    if '地点' in mcfieldnamezh:
        val = faker.address()
        return val
    # if '类型' in mcfieldnamezh or '类别' in mcfieldnamezh:
    #     val = faker.random.choice((
    #         # 根据文心一言/chatgpt/chatglm生产20个左右的类别即可.
    #     ))
    #     return val

        
    # 用户表
    
    # 用户表.用户ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '用户ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户表.用户名 <CharField>
    # 
    if mcfieldnamezh == '用户名':
        
        # 载入配置成功
        # 给出一些用户表表中用户名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eve', ' Frank', ' Grace', ' Henry', ' Ivy', ' John', ' Kate', ' Larry', ' Mary', ' Nick', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Sam', ' Tom', ', 'Alice', ' Bob', ' Charlie', ' David', ' Eve', ' Frank', ' Grace', ' Henry', ' Ivy', ' John', ' Kate', ' Larry', ' Mary', ' Nick', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Sam', ' Tom', '
    ))

        val = loadvalue
        
        return val
    
    # 用户表.用户邮箱 <EmailField>
    # 
    if mcfieldnamezh == '用户邮箱':
        
        # 载入配置成功
        # 给出一些用户表表中用户邮箱的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'user1@example.com', ' user2@example.com', ' user3@example.com', ' user4@example.com', ' user5@example.com', ' user6@example.com', ' user7@example.com', ' user8@example.com', ' user9@example.com', ' user10@example.com', ' user11@example.com', ' user12@example.com', ' user13@example.com', ' user14@example.com', ' user15@example.com', ' user16@example.com', ' user17@example.com', ' user18@example.com', ' user19@example.com', ' user20@example.com', '
    ))

        val = loadvalue
        
        return val
    
    # 用户表.用户密码 <CharField>
    # 
    if mcfieldnamezh == '用户密码':
        
        # 载入配置成功
        # 给出一些用户表表中用户密码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Password1234567890abcdefghij', ', 'qwertyuiopasdfghjklzxcvbnm', ', '1qaz2wsx3edc4rfv5tgb6yhn7ujm', ', 'MyLongAndSecurePassword12345', ', 'SecurePassword!WithNumbers123', ', 'LongPasswordExampleForDemo', ', 'ThisIsASecurePasswordExample', ', 'DemoPasswordWithSpecialChars@', ', 'SecureDemoPassword1234567890', ', 'DemoPasswordWithLettersAndNums'
    ))

        val = loadvalue
        
        return val
    
    # 用户表.用户角色 <CharField>
    # 
    if mcfieldnamezh == '用户角色':
        
        # 载入配置成功
        # 给出一些用户表表中用户角色的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '管理员', '普通用户', '编辑', '访客', '超级管理员', '数据分析师', '内容创作者', '审核员', '技术支持', '市场专员', '财务', '客服', '实习生', '合作伙伴', 'VIP用户', '高级用户', '社区管理员', '论坛版主', '测试员', '系统维护员', '
    ))

        val = loadvalue
        
        return val
    
    # 用户表.创建日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建日期':
        
        # 载入配置成功
        # 给出一些用户表表中创建日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 用户表.最后登录日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后登录日期':
        
        # 载入配置成功
        # 给出一些用户表表中最后登录日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 14:30:00', ' 2023-10-22 09:15:45', ' 2023-10-21 22:07:12', ' 2023-10-20 17:45:30', ' 2023-10-19 11:30:20', ' 2023-10-18 16:00:00', ' 2023-10-17 08:45:15', ' 2023-10-16 21:30:45', ' 2023-10-15 15:15:30', ' 2023-10-14 10:00:15', ' 2023-10-13 18:45:00', ' 2023-10-12 13:30:15', ' 2023-10-11 07:15:30', ' 2023-10-10 20:00:45', ' 2023-10-09 14:45:15', ' 2023-10-08 09:30:30', ' 2023-10-07 17:15:00', ' 2023-10-06 12:00:15', ' 2023-10-05 06:45:30', ' 2023-10-04 23:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 用户表.是否活跃 <BooleanField>
    # 
    if mcfieldnamezh == '是否活跃':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 用户表.部门ID关联字段 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID关联字段':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 角色表
    
    # 角色表.角色ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '角色ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 角色表.角色名称 <CharField>
    # 
    if mcfieldnamezh == '角色名称':
        
        # 载入配置成功
        # 给出一些角色表表中角色名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '角色1', ' 角色2', ' 角色3', ' 角色4', ' 角色5', ' 角色6', ' 角色7', ' 角色8', ' 角色9', ' 角色10', ' 角色11', ' 角色12', ' 角色13', ' 角色14', ' 角色15', ' 角色16', ' 角色17', ' 角色18', ' 角色19', ' 角色20', '
    ))

        val = loadvalue
        
        return val
    
    # 角色表.角色描述 <TextField>
    # 
    if mcfieldnamezh == '角色描述':
        
        # 载入配置成功
        # 给出一些角色表表中角色描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '系统管理员', '具有最高权限，可以管理所有用户和数据', ' 项目经理', '负责项目的整体规划和执行', ' 开发工程师', '负责编写和维护系统代码', ' 测试工程师', '负责系统的测试工作，确保质量', ' UI设计师', '负责设计用户界面和用户体验', ' 数据分析师', '负责收集和分析数据以提供决策支持', ' 市场营销经理', '负责市场推广和品牌建设', ' 客户服务代表', '负责处理客户咨询和投诉', ' 财务经理', '负责财务管理和预算控制', ' 人力资源经理', '负责招聘、培训和员工管理', ' 产品经理', '负责产品的规划、开发和推广', ' 销售经理', '负责销售团队的领导和销售业绩的达成', ' 技术支持工程师', '提供技术支持和解决方案', ' 内容编辑', '负责网站或应用的内容创作和编辑', ' 采购经理', '负责采购和供应商管理', ' 法务经理', '负责法律事务和合规管理', ' 公关经理', '负责公司的公关活动和媒体关系', ' 运营经理', '负责公司的日常运营和管理', ' 培训师', '负责员工培训和知识传授', ' 实习生', '参与公司的各项工作，学习实践经验', '
    ))

        val = loadvalue
        
        return val
    
    # 角色表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些角色表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 角色表.创建者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 角色表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些角色表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 角色表.更新者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 角色表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 角色表.部门ID关联字段指向部门的ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID关联字段指向部门的ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 用户角色关联表
    
    # 用户角色关联表.用户ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '用户ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户角色关联表.角色ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '角色ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户角色关联表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些用户角色关联表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 用户角色关联表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些用户角色关联表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 用户角色关联表.是否激活用于标记该关联是否有效 <SelectField>
    # 
    if mcfieldnamezh == '是否激活用于标记该关联是否有效':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户角色关联表.创建者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 用户角色关联表.最后修改者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后修改者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 周报模板表
    
    # 周报模板表.模板ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '模板ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 周报模板表.模板名称 <CharField>
    # 
    if mcfieldnamezh == '模板名称':
        
        # 载入配置成功
        # 给出一些周报模板表表中模板名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '模板1', ' 模板2', ' 模板3', ' 模板4', ' 模板5', ' 模板6', ' 模板7', ' 模板8', ' 模板9', ' 模板10', ' 模板11', ' 模板12', ' 模板13', ' 模板14', ' 模板15', ' 模板16', ' 模板17', ' 模板18', ' 模板19', ' 模板20', '
    ))

        val = loadvalue
        
        return val
    
    # 周报模板表.模板描述 <TextField>
    # 
    if mcfieldnamezh == '模板描述':
        
        # 给出一些周报模板表表中模板描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 周报模板表.创建者 <CharField>
    # 
    if mcfieldnamezh == '创建者':
        
        # 载入配置成功
        # 给出一些周报模板表表中创建者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ', 'Kevin', ' Laura', ' Michael', ' Nina', ' Oliver', ' Patricia', ' Quentin', ' Rachel', ' Samuel', ' Tina', '
    ))

        val = loadvalue
        
        return val
    
    # 周报模板表.创建日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建日期':
        
        # 载入配置成功
        # 给出一些周报模板表表中创建日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 周报模板表.最后修改者 <CharField>
    # 
    if mcfieldnamezh == '最后修改者':
        
        # 载入配置成功
        # 给出一些周报模板表表中最后修改者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ' Kate', ' Lucas', ' Mia', ' Noah', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Sam', ' Thomas', '
    ))

        val = loadvalue
        
        return val
    
    # 周报模板表.最后修改日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后修改日期':
        
        # 载入配置成功
        # 给出一些周报模板表表中最后修改日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '最后修改日期 AS LastModifiedDate', ', '`LastModifiedDate` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP', '
    ))

        val = loadvalue
        
        return val
    
    # 周报模板表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 周报模板表.部门ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 周报表
    
    # 周报表.报ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 周报表.周开始日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '周开始日期':
        
        # 给出一些周报表表中周开始日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 周报表.周结束日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '周结束日期':
        
        # 给出一些周报表表中周结束日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 周报表.部门 <CharField>
    # 
    if mcfieldnamezh == '部门':
        
        # 载入配置成功
        # 给出一些周报表表中部门的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'IT部', '人事部', '财务部', '市场部', '研发部', '生产部', '采购部', '销售部', '客服部', '法务部', ', '行政部', '物流部', '设计部', '策划部', '公关部', '培训部', '技术支持部', '产品部', '质量部', '安全部', '
    ))

        val = loadvalue
        
        return val
    
    # 周报表.员工姓名 <CharField>
    # 
    if mcfieldnamezh == '员工姓名':
        
        # 载入配置成功
        # 给出一些周报表表中员工姓名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '张三', ' 李四', ' 王五', ' 赵六', ' 孙七', ' 周八', ' 吴九', ' 郑十', ' 陈十一', ' 郭十二', ' 高十三', ' 何十四', ' 林十五', ' 罗十六', ' 马十七', ' 肖十八', ' 唐十九', ' 谢二十', ' 韩二十一', ' 冯二十二', '
    ))

        val = loadvalue
        
        return val
    
    # 周报表.报告内容 <TextField>
    # 
    if mcfieldnamezh == '报告内容':
        
        # 载入配置成功
        # 给出一些周报表表中报告内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '这是一份详细的报告内容', ', ', '包含多个部分和关键信息', ', ', '分析了市场趋势和用户需求', ', ', '提出了改进建议和行动计划', ', ', '报告内容详细且易于理解', ', ', '为决策提供了有力支持', ', ', '报告内容涵盖了多个方面', '包括销售、市场、产品等', ', ', '每个部分都有详细的数据和分析', ', ', '报告内容基于最新的市场数据和用户反馈', ', ', '为公司的未来发展提供了重要参考', ', ', '报告内容强调了团队合作和创新精神', ', ', '是团队共同努力的成果', ', ', '报告内容简洁明了，重点突出', ', ', '为管理层提供了清晰的决策依据', ', ', '报告内容详细记录了项目的进展和成果', ', ', '为项目评估提供了有力支持', ', ', '报告内容包含了对竞争对手的分析', ', ', '为公司制定竞争策略提供了参考', ', ', '报告内容涵盖了产品的优缺点和改进建议', ', ', '为产品优化提供了方向', '
    ))

        val = loadvalue
        
        return val
    
    # 周报表.状态 <CharField>
    # 
    if mcfieldnamezh == '状态':
        
        # 载入配置成功
        # 给出一些周报表表中状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待处理', '已处理', '处理中', '已完成', '已取消', '待审核', '审核通过', '审核失败', '待发货', '已发货', '运输中', '已签收', '退货中', '已退货', '退款中', '已退款', '待支付', '已支付', '支付失败', '未知状态', '
    ))

        val = loadvalue
        
        return val
    
    # 周报表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些周报表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 周报表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些周报表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    
    # 报告周期表
    
    # 报告周期表.报告周期ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告周期ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告周期表.周期名称 <CharField>
    # 
    if mcfieldnamezh == '周期名称':
        
        # 给出一些报告周期表表中周期名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告周期表.开始日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '开始日期':
        
        # 载入配置成功
        # 给出一些报告周期表表中开始日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ', '2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ', '2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ', '2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 报告周期表.结束日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '结束日期':
        
        # 载入配置成功
        # 给出一些报告周期表表中结束日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-10-24', ' 2023-10-25', ' 2023-10-26', ' 2023-10-27', ' 2023-10-28', ' 2023-10-29', ' 2023-10-30', ' 2023-10-31', ' 2023-11-01', ' 2023-11-02', ' 2023-11-03', ' 2023-11-04', ' 2023-11-05', ' 2023-11-06', ' 2023-11-07', ' 2023-11-08', ' 2023-11-09', ' 2023-11-10', '
    ))

        val = loadvalue
        
        return val
    
    # 报告周期表.是否活跃用于标记当前周期是否还在使用中 <BooleanField>
    # 
    if mcfieldnamezh == '是否活跃用于标记当前周期是否还在使用中':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报告周期表.创建者记录创建该周期的用户 <CharField>
    # 
    if mcfieldnamezh == '创建者记录创建该周期的用户':
        
        # 给出一些报告周期表表中创建者记录创建该周期的用户的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告周期表.创建日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建日期':
        
        # 载入配置成功
        # 给出一些报告周期表表中创建日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 报告周期表.最后修改者记录最后修改该周期的用户 <CharField>
    # 
    if mcfieldnamezh == '最后修改者记录最后修改该周期的用户':
        
        # 给出一些报告周期表表中最后修改者记录最后修改该周期的用户的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告周期表.最后修改日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后修改日期':
        
        # 载入配置成功
        # 给出一些报告周期表表中最后修改日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '最后修改日期 AS LastModifiedDate', ', '`LastModifiedDate` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP', '
    ))

        val = loadvalue
        
        return val
    
    
    # 报告状态表
    
    # 报告状态表.报告状态ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告状态ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告状态表.状态名称 <CharField>
    # 
    if mcfieldnamezh == '状态名称':
        
        # 载入配置成功
        # 给出一些报告状态表表中状态名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '状态1', ' 状态2', ' 状态3', ' 状态4', ' 状态5', ' 状态6', ' 状态7', ' 状态8', ' 状态9', ' 状态10', ' 状态11', ' 状态12', ' 状态13', ' 状态14', ' 状态15', ' 状态16', ' 状态17', ' 状态18', ' 状态19', ' 状态20', ', 'SELECT * FROM orders WHERE 状态名称 IN (状态1', ' 状态2', ' 状态3', ' 状态4', ' 状态5', ' 状态6', ' 状态7', ' 状态8', ' 状态9', ' 状态10', ' 状态11', ' 状态12', ' 状态13', ' 状态14', ' 状态15', ' 状态16', ' 状态17', ' 状态18', ' 状态19', ' 状态20);'
    ))

        val = loadvalue
        
        return val
    
    # 报告状态表.状态描述 <TextField>
    # 
    if mcfieldnamezh == '状态描述':
        
        # 载入配置成功
        # 给出一些报告状态表表中状态描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待处理', ' 处理中', ' 已完成', ' 已取消', ' 待审核', ' 审核通过', ' 审核失败', ' 已支付', ' 未支付', ' 已发货', ' 已签收', ' 已退货', ' 待退款', ' 已退款', ' 部分退款', ' 已关闭', ' 已拒绝', ' 已超时', ' 已锁定', ' 已解锁', '
    ))

        val = loadvalue
        
        return val
    
    # 报告状态表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些报告状态表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 报告状态表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些报告状态表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 报告状态表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报告状态表.是否为默认状态 <BooleanField>
    # 
    if mcfieldnamezh == '是否为默认状态':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报告状态表.排序顺序 <CharField>
    # 
    if mcfieldnamezh == '排序顺序':
        
        # 载入配置成功
        # 给出一些报告状态表表中排序顺序的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'ORDER BY', 'field1', ' field2', ' field3', ' field4', ' field5', ', 'field6', ' field7', ' field8', ' field9', ' field10', ', 'field11', ' field12', ' field13', ' field14', ' field15', ', 'field16', ' field17', ' field18', ' field19', ' field20', ', 'ORDER BY', 'field1', ' field2', ' field3', ' field4', ' field5', ', 'field6', ' field7', ' field8', ' field9', ' field10', ', 'field11', ' field12', ' field13', ' field14', ' field15', ', 'field16', ' field17', ' field18', ' field19', ' field20'
    ))

        val = loadvalue
        
        return val
    
    # 报告状态表.关联报告ID指向报告的ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联报告ID指向报告的ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 报告类型表
    
    # 报告类型表.报告类型ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告类型ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告类型表.报告类型名称 <CharField>
    # 
    if mcfieldnamezh == '报告类型名称':
        
        # 给出一些报告类型表表中报告类型名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告类型表.描述 <TextField>
    # 
    if mcfieldnamezh == '描述':
        
        # 载入配置成功
        # 给出一些报告类型表表中描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1描述', ' 字段2描述', ' 字段3详细信息', ' 列4的用途', ' 数据5的含义', ' 特性6的说明', ' 属性7的注解', ' 值8的上下文', ' 列9的用途说明', ' 字段10的简短描述', ' 列11的详细解释', ' 数据12的用途', ' 特性13的简短说明', ' 属性14的详细描述', ' 值15的上下文解释', ' 字段16的用途', ' 列17的额外信息', ' 数据18的备注', ' 字段19的用途描述', ' 列20的简短注解', '
    ))

        val = loadvalue
        
        return val
    
    # 报告类型表.是否激活用于控制该报告类型是否可用 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活用于控制该报告类型是否可用':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报告类型表.创建日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建日期':
        
        # 载入配置成功
        # 给出一些报告类型表表中创建日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 报告类型表.创建者ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID关联用户':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告类型表.修改日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '修改日期':
        
        # 载入配置成功
        # 给出一些报告类型表表中修改日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-10-22', ' 2023-10-21', ' 2023-10-20', ' 2023-10-19', ', '2023-10-18', ' 2023-10-17', ' 2023-10-16', ' 2023-10-15', ' 2023-10-14', ', '2023-10-13', ' 2023-10-12', ' 2023-10-11', ' 2023-10-10', ' 2023-10-09', ', '2023-10-08', ' 2023-10-07', ' 2023-10-06', ' 2023-10-05', ' 2023-10-04', ', '2023-10-23', ' 2023-10-22', ' 2023-10-21', ' 2023-10-20', ' 2023-10-19', ' 2023-10-18', ' 2023-10-17', ' 2023-10-16', ' 2023-10-15', ' 2023-10-14', ' 2023-10-13', ' 2023-10-12', ' 2023-10-11', ' 2023-10-10', ' 2023-10-09', ' 2023-10-08', ' 2023-10-07', ' 2023-10-06', ' 2023-10-05', ' 2023-10-04', '
    ))

        val = loadvalue
        
        return val
    
    # 报告类型表.修改者ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '修改者ID关联用户':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告类型表.父报告类型ID用于构建报告类型的层级关系关联本的RepkwkwortTypeID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '父报告类型ID用于构建报告类型的层级关系关联本的RepkwkwortTypeID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 报告审核表
    
    # 报告审核表.报告审核ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告审核ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告审核表.报告ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告审核表.审核人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '审核人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告审核表.审核日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '审核日期':
        
        # 载入配置成功
        # 给出一些报告审核表表中审核日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-10-22', ' 2023-10-21', ' 2023-10-20', ' 2023-10-19', ', '2023-10-18', ' 2023-10-17', ' 2023-10-16', ' 2023-10-15', ' 2023-10-14', ', '2023-10-13', ' 2023-10-12', ' 2023-10-11', ' 2023-10-10', ' 2023-10-09', ', '2023-10-08', ' 2023-10-07', ' 2023-10-06', ' 2023-10-05', ' 2023-10-04', '
    ))

        val = loadvalue
        
        return val
    
    # 报告审核表.审核状态 <CharField>
    # 
    if mcfieldnamezh == '审核状态':
        
        # 载入配置成功
        # 给出一些报告审核表表中审核状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待审核', ' 审核中', ' 审核通过', ' 审核拒绝', ' 已重新提交', ' 需补充材料', ' 已退回', ' 已锁定', ' 已解锁', ' 已暂停', ' 已恢复', ' 待复审', ' 复审通过', ' 复审拒绝', ' 自动审核通过', ' 自动审核拒绝', ' 人工复审中', ' 已自动处理', ' 部分通过', ' 部分拒绝', '
    ))

        val = loadvalue
        
        return val
    
    # 报告审核表.审核意见 <CharField>
    # 
    if mcfieldnamezh == '审核意见':
        
        # 载入配置成功
        # 给出一些报告审核表表中审核意见的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '意见1', ' 意见2', ' 需要进一步核实', ' 内容基本准确', ' 格式不符合要求', ' 请补充详细信息', ' 已审核通过', ' 存在逻辑错误', ' 请修改后再提交', ' 图片不清晰', ' 建议增加相关内容', ' 内容过长，请精简', ' 与主题不符', ' 数据不准确', ' 审核中...', ' 请确保信息真实有效', ' 请检查错别字', ' 已拒绝', ' 请重新提交', ' 其他意见', '
    ))

        val = loadvalue
        
        return val
    
    # 报告审核表.批准日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '批准日期':
        
        # 载入配置成功
        # 给出一些报告审核表表中批准日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 报告审核表.批准人 <CharField>
    # 
    if mcfieldnamezh == '批准人':
        
        # 载入配置成功
        # 给出一些报告审核表表中批准人的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '张三', ' 李四', ' 王五', ' 赵六', ' 孙七', ' 周八', ' 吴九', ' 郑十', ' 陈十一', ' 郭十二', ' 高十三', ' 何十四', ' 胡十五', ' 林十六', ' 罗十七', ' 马十八', ' 冯十九', ' 谢二十', ' 唐二十一', ' 韩二十二', '
    ))

        val = loadvalue
        
        return val
    
    # 报告审核表.是否已批准 <BooleanField>
    # 
    if mcfieldnamezh == '是否已批准':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报告审核表.拒绝理由 <CharField>
    # 
    if mcfieldnamezh == '拒绝理由':
        
        # 载入配置成功
        # 给出一些报告审核表表中拒绝理由的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '理由1：信息不完整', ' 理由2：不符合资格', ' 理由3：重复申请', ' 理由4：文件缺失', ' 理由5：付款问题', ' 理由6：违反政策', ' 理由7：技术问题', ' 理由8：超过截止日期', ' 理由9：不符合要求', ' 理由10：申请已取消', ' 理由11：申请人未确认', ' 理由12：审核失败', ' 理由13：资料不真实', ' 理由14：与其他申请冲突', ' 理由15：超出预算', ' 理由16：不符合法律要求', ' 理由17：申请人资格变更', ' 理由18：申请人未响应', ' 理由19：系统错误', ' 理由20：其他未知原因', '
    ))

        val = loadvalue
        
        return val
    
    
    # 审核意见表
    
    # 审核意见表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 审核意见表.审核意见内容 <TextField>
    # 
    if mcfieldnamezh == '审核意见内容':
        
        # 给出一些审核意见表表中审核意见内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 审核意见表.创建者ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID关联用户':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 审核意见表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些审核意见表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 审核意见表.最后修改者ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后修改者ID关联用户':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 审核意见表.最后修改时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后修改时间':
        
        # 载入配置成功
        # 给出一些审核意见表表中最后修改时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 15:45:30', ', '2023-10-23 15:45:30', ' 2023-10-24 09:10:20', '
    ))

        val = loadvalue
        
        return val
    
    # 审核意见表.审核状态例如待审核、已通过、未通过 <CharField>
    # 
    if mcfieldnamezh == '审核状态例如待审核、已通过、未通过':
        
        # 给出一些审核意见表表中审核状态例如待审核、已通过、未通过的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 审核意见表.目标ID关联被审核对象的ID如周报ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '目标ID关联被审核对象的ID如周报ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 审核意见表.目标类型例如周报、项目报告等 <CharField>
    # 
    if mcfieldnamezh == '目标类型例如周报、项目报告等':
        
        # 给出一些审核意见表表中目标类型例如周报、项目报告等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    
    # 部门表
    
    # 部门表.部门ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 部门表.部门名称 <CharField>
    # 
    if mcfieldnamezh == '部门名称':
        
        # 载入配置成功
        # 给出一些部门表表中部门名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '部门一', '部门二', '部门三', '部门四', '部门五', '部门六', '部门七', '部门八', '部门九', '部门十', '部门十一', '部门十二', '部门十三', '部门十四', '部门十五', '部门十六', '部门十七', '部门十八', '部门十九', '部门二十', '
    ))

        val = loadvalue
        
        return val
    
    # 部门表.上级部门ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '上级部门ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 部门表.部门编码 <CharField>
    # 
    if mcfieldnamezh == '部门编码':
        
        # 给出一些部门表表中部门编码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 部门表.部门描述 <TextField>
    # 
    if mcfieldnamezh == '部门描述':
        
        # 载入配置成功
        # 给出一些部门表表中部门描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '(人力资源部', ' 财务部', ' 市场部', ' 技术部', ' 研发部', ' 生产部', ' 采购部', ' 销售部', ' 客服部', ' 法务部', ' 行政部', ' 公关部', ' 设计部', ' 策划部', ' 运营部', ' 数据部', ' 物流部', ' 仓储部', ' 维修部', ' 培训部)', '
    ))

        val = loadvalue
        
        return val
    
    # 部门表.创建日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建日期':
        
        # 载入配置成功
        # 给出一些部门表表中创建日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 部门表.创建人 <CharField>
    # 
    if mcfieldnamezh == '创建人':
        
        # 载入配置成功
        # 给出一些部门表表中创建人的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ' Katherine', ' Lucas', ' Maria', ' Nathan', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Samuel', ' Tina', ', 'INSERT INTO your_table_name (creators) VALUES', '(Alice)', ', '(Bob)', ', '(Charlie)', ', '... -- 以此类推，为其他名称添加相应的值', '(Tina);'
    ))

        val = loadvalue
        
        return val
    
    # 部门表.最后修改日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后修改日期':
        
        # 载入配置成功
        # 给出一些部门表表中最后修改日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '最后修改日期 AS LastModifiedDate', ', '`LastModifiedDate` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP', '
    ))

        val = loadvalue
        
        return val
    
    # 部门表.最后修改人 <CharField>
    # 
    if mcfieldnamezh == '最后修改人':
        
        # 载入配置成功
        # 给出一些部门表表中最后修改人的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '张三', ' 李四', ' 王五', ' 赵六', ' 孙七', ' 周八', ' 吴九', ' 郑十', ' 陈十一', ' 褚十二', ' 卫十三', ' 蒋十四', ' 沈十五', ' 韩十六', ' 杨十七', ' 朱十八', ' 秦十九', ' 尤二十', ' 许二十一', ' 何二十二', '
    ))

        val = loadvalue
        
        return val
    
    # 部门表.是否活跃 <BooleanField>
    # 
    if mcfieldnamezh == '是否活跃':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    
    # 员工表
    
    # 员工表.员工ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '员工ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 员工表.员工姓名 <CharField>
    # 
    if mcfieldnamezh == '员工姓名':
        
        # 载入配置成功
        # 给出一些员工表表中员工姓名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '张三', ' 李四', ' 王五', ' 赵六', ' 孙七', ' 周八', ' 吴九', ' 郑十', ' 陈十一', ' 郭十二', ' 高十三', ' 何十四', ' 林十五', ' 罗十六', ' 马十七', ' 肖十八', ' 唐十九', ' 谢二十', ' 韩二十一', ' 冯二十二', '
    ))

        val = loadvalue
        
        return val
    
    # 员工表.部门ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 员工表.职位 <CharField>
    # 
    if mcfieldnamezh == '职位':
        
        # 载入配置成功
        # 给出一些员工表表中职位的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '工程师', ' 设计师', ' 市场专员', ' 产品经理', ' 项目经理', ' 销售经理', ' 客服代表', ' 人力资源专员', ' 财务分析师', ' 行政助理', ' 软件开发工程师', ' UI设计师', ' 数据分析师', ' 运营专员', ' 采购经理', ' 法务专员', ' 公关经理', ' 技术支持工程师', ' 内容编辑', ' 测试工程师', '
    ))

        val = loadvalue
        
        return val
    
    # 员工表.电子邮件 <CharField>
    # 
    if mcfieldnamezh == '电子邮件':
        
        # 载入配置成功
        # 给出一些员工表表中电子邮件的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'example1@email.com', ' example2@email.com', ' example3@email.net', ' example4@domain.org', ' example5@company.com', ' example6@web.com', ' example7@mail.com', ' example8@info.net', ' example9@online.com', ' example10@contact.com', ' example11@address.com', ' example12@service.com', ' example13@support.org', ' example14@internet.com', ' example15@local.net', ' example16@user.com', ' example17@webmail.com', ' example18@inbox.org', ' example19@host.com', ' example20@email.org', '
    ))

        val = loadvalue
        
        return val
    
    # 员工表.电话号码 <CharField>
    # 
    if mcfieldnamezh == '电话号码':
        
        # 载入配置成功
        # 给出一些员工表表中电话号码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '1234567890', ' 0987654321', ' 1112223334', ' 4445556667', ' 7778889990', ' 0001112223', ' 3334445556', ' 6667778889', ' 9990001112', ' 2223334445', ' 5556667778', ' 8889990001', ' 1357924680', ' 2468013579', ' 9876543210', ' 0123456789', ' 1029384756', ' 2130495867', ' 3241506978', ' 4352617089', '
    ))

        val = loadvalue
        
        return val
    
    # 员工表.入职日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '入职日期':
        
        # 载入配置成功
        # 给出一些员工表表中入职日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 员工表.薪资 <CharField>
    # 
    if mcfieldnamezh == '薪资':
        
        # 载入配置成功
        # 给出一些员工表表中薪资的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '5000', ' 6500', ' 7200', ' 8000', ' 8500', ' 9000', ' 9500', ' 10000', ' 11000', ' 12000', ', '13000', ' 14000', ' 15000', ' 16000', ' 17000', ' 18000', ' 19000', ' 20000', ' 21000', ' 22000', '
    ))

        val = loadvalue
        
        return val
    
    # 员工表.上级员工ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '上级员工ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 员工表.是否在职 <BooleanField>
    # 
    if mcfieldnamezh == '是否在职':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    
    # 员工周报关联表
    
    # 员工周报关联表.关联ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 员工周报关联表.员工ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '员工ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 员工周报关联表.周报ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '周报ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 员工周报关联表.周报开始日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '周报开始日期':
        
        # 给出一些员工周报关联表表中周报开始日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 员工周报关联表.周报结束日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '周报结束日期':
        
        # 给出一些员工周报关联表表中周报结束日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 员工周报关联表.状态如已提交、待审核、已审核等 <CharField>
    # 
    if mcfieldnamezh == '状态如已提交、待审核、已审核等':
        
        # 给出一些员工周报关联表表中状态如已提交、待审核、已审核等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 员工周报关联表.提交时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '提交时间':
        
        # 载入配置成功
        # 给出一些员工周报关联表表中提交时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', ' 2023-10-25 10:45:15', '
    ))

        val = loadvalue
        
        return val
    
    # 员工周报关联表.审核人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '审核人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 员工周报关联表.审核时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '审核时间':
        
        # 载入配置成功
        # 给出一些员工周报关联表表中审核时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:30:00', ' 2023-10-24 12:45:15', ' 2023-10-25 14:15:30', ' 2023-10-26 08:00:00', ' 2023-10-27 10:30:45', ' 2023-10-28 13:15:10', ' 2023-10-29 16:00:00', ' 2023-10-30 18:30:15', ' 2023-10-31 21:00:30', ' 2023-11-01 00:15:00', ' 2023-11-02 03:30:00', ' 2023-11-03 06:45:15', ' 2023-11-04 09:00:00', ' 2023-11-05 11:30:45', ' 2023-11-06 14:15:10', ' 2023-11-07 16:45:00', ' 2023-11-08 19:15:15', ' 2023-11-09 21:45:30', ' 2023-11-10 00:30:00', ' 2023-11-11 03:00:00', '
    ))

        val = loadvalue
        
        return val
    
    
    # 通知表
    
    # 通知表.通知ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '通知ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 通知表.通知标题 <CharField>
    # 
    if mcfieldnamezh == '通知标题':
        
        # 载入配置成功
        # 给出一些通知表表中通知标题的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '重要通知', ' 关于系统更新的通知', ' 会议安排通知', ' 员工福利调整通知', ' 年度总结会议通知', ' 节假日放假安排通知', ' 新员工入职通知', ' 产品发布通知', ' 订单处理通知', ' 客户服务更新通知', ' 系统维护通知', ' 财务结算通知', ' 培训安排通知', ' 团队活动通知', ' 安全警示通知', ' 市场活动通知', ' 公司政策更新通知', ' 设备维护通知', ' 项目进度通知', ' 内部沟通通知', '
    ))

        val = loadvalue
        
        return val
    
    # 通知表.通知内容 <TextField>
    # 
    if mcfieldnamezh == '通知内容':
        
        # 载入配置成功
        # 给出一些通知表表中通知内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '这是一条通知内容示例1', ', ', '请查看您的最新通知内容2', ', ', '重要通知：请于明天参加会议3', ', ', '您的订单已发货，详情见附件4', ', ', '系统更新通知：新版本已上线5', ', ', '您的账户将于一周后到期，请续费6', ', ', '您的密码已重置，新密码为1234567', ', ', '恭喜您中奖了，奖品将在三日内寄出8', ', ', '您的账户存在异常登录，请尽快修改密码9', ', ', '您的订单已取消，如有疑问请联系客服10', '
    ))

        val = loadvalue
        
        return val
    
    # 通知表.发送者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '发送者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 通知表.接收者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '接收者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 通知表.发送时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '发送时间':
        
        # 载入配置成功
        # 给出一些通知表表中发送时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 08:00:00', ' 2023-10-23 08:15:30', ' 2023-10-23 08:30:45', ' 2023-10-23 08:45:15', ', '2023-10-23 09:00:00', ' 2023-10-23 09:15:30', ' 2023-10-23 09:30:45', ' 2023-10-23 09:45:15', ', '2023-10-23 10:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 10:30:45', ' 2023-10-23 10:45:15', ', '2023-10-23 11:00:00', ' 2023-10-23 11:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 11:45:15', ', '2023-10-23 12:00:00', ' 2023-10-23 12:15:30', ' 2023-10-23 12:30:45', ' 2023-10-23 12:45:15', '
    ))

        val = loadvalue
        
        return val
    
    # 通知表.阅读状态 <CharField>
    # 
    if mcfieldnamezh == '阅读状态':
        
        # 载入配置成功
        # 给出一些通知表表中阅读状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '已读', ' 未读', ' 正在阅读', ' 跳过', ' 稍后阅读', ' 已标记', ' 已归档', ' 已分享', ' 已评论', ' 已点赞', ' 已完成', ' 已忽略', ' 已删除', ' 已下载', ' 已打印', ' 已收藏', ' 已标记为重要', ' 已标记为待办', ' 已标记为已处理', ' 已标记为已回复', '
    ))

        val = loadvalue
        
        return val
    
    # 通知表.优先级 <CharField>
    # 
    if mcfieldnamezh == '优先级':
        
        # 载入配置成功
        # 给出一些通知表表中优先级的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '最高', ' 高', ' 中', ' 低', ' 最低', ' 紧急', ' 重要', ' 普通', ' 次要', ' 可选', ' 不推荐', ' 低优先级', ' 中优先级', ' 高优先级', ' 顶级', ' 非常紧急', ' 常规', ' 较低', ' 极低', ' 其他', '
    ))

        val = loadvalue
        
        return val
    
    # 通知表.是否删除 <BooleanField>
    # 
    if mcfieldnamezh == '是否删除':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    
    # 通知类型表
    
    # 通知类型表.通知类型ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '通知类型ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 通知类型表.通知类型名称 <CharField>
    # 
    if mcfieldnamezh == '通知类型名称':
        
        # 给出一些通知类型表表中通知类型名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 通知类型表.描述 <TextField>
    # 
    if mcfieldnamezh == '描述':
        
        # 载入配置成功
        # 给出一些通知类型表表中描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1描述', ' 字段2描述', ' 字段3详细信息', ' 列4的用途', ' 数据5的含义', ' 特性6的说明', ' 属性7的注解', ' 值8的上下文', ' 列9的用途说明', ' 字段10的简短描述', ' 列11的详细解释', ' 数据12的用途', ' 特性13的简短说明', ' 属性14的详细描述', ' 值15的上下文解释', ' 字段16的用途', ' 列17的额外信息', ' 数据18的备注', ' 字段19的用途描述', ' 列20的简短注解', '
    ))

        val = loadvalue
        
        return val
    
    # 通知类型表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 通知类型表.创建日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建日期':
        
        # 载入配置成功
        # 给出一些通知类型表表中创建日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ' 2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ' 2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ' 2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 通知类型表.创建者 <CharField>
    # 
    if mcfieldnamezh == '创建者':
        
        # 载入配置成功
        # 给出一些通知类型表表中创建者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ', 'Kevin', ' Laura', ' Michael', ' Nina', ' Oliver', ' Patricia', ' Quentin', ' Rachel', ' Samuel', ' Tina', '
    ))

        val = loadvalue
        
        return val
    
    # 通知类型表.修改日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '修改日期':
        
        # 载入配置成功
        # 给出一些通知类型表表中修改日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23', ' 2023-10-22', ' 2023-10-21', ' 2023-10-20', ' 2023-10-19', ', '2023-10-18', ' 2023-10-17', ' 2023-10-16', ' 2023-10-15', ' 2023-10-14', ', '2023-10-13', ' 2023-10-12', ' 2023-10-11', ' 2023-10-10', ' 2023-10-09', ', '2023-10-08', ' 2023-10-07', ' 2023-10-06', ' 2023-10-05', ' 2023-10-04', ', '2023-10-23', ' 2023-10-22', ' 2023-10-21', ' 2023-10-20', ' 2023-10-19', ' 2023-10-18', ' 2023-10-17', ' 2023-10-16', ' 2023-10-15', ' 2023-10-14', ' 2023-10-13', ' 2023-10-12', ' 2023-10-11', ' 2023-10-10', ' 2023-10-09', ' 2023-10-08', ' 2023-10-07', ' 2023-10-06', ' 2023-10-05', ' 2023-10-04', '
    ))

        val = loadvalue
        
        return val
    
    # 通知类型表.修改者 <CharField>
    # 
    if mcfieldnamezh == '修改者':
        
        # 载入配置成功
        # 给出一些通知类型表表中修改者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ' Kate', ' Lucy', ' Michael', ' Nina', ' Oliver', ' Patricia', ' Quentin', ' Rachel', ' Sam', ' Tina', '
    ))

        val = loadvalue
        
        return val
    
    # 通知类型表.父通知类型ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '父通知类型ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 通知类型表.排序顺序 <CharField>
    # 
    if mcfieldnamezh == '排序顺序':
        
        # 载入配置成功
        # 给出一些通知类型表表中排序顺序的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'ORDER BY', 'field1', ' field2', ' field3', ' field4', ' field5', ', 'field6', ' field7', ' field8', ' field9', ' field10', ', 'field11', ' field12', ' field13', ' field14', ' field15', ', 'field16', ' field17', ' field18', ' field19', ' field20', ', 'ORDER BY', 'field1', ' field2', ' field3', ' field4', ' field5', ', 'field6', ' field7', ' field8', ' field9', ' field10', ', 'field11', ' field12', ' field13', ' field14', ' field15', ', 'field16', ' field17', ' field18', ' field19', ' field20'
    ))

        val = loadvalue
        
        return val
    
    
    # 邮件发送记录表
    
    # 邮件发送记录表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 邮件发送记录表.电子邮件地址 <TextField>
    # 
    if mcfieldnamezh == '电子邮件地址':
        
        # 载入配置成功
        # 给出一些邮件发送记录表表中电子邮件地址的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'example1@example.com', ' example2@example.com', ' example3@example.com', ' example4@example.com', ' example5@example.com', ' example6@example.com', ' example7@example.com', ' example8@example.com', ' example9@example.com', ' example10@example.com', ' example11@example.com', ' example12@example.com', ' example13@example.com', ' example14@example.com', ' example15@example.com', ' example16@example.com', ' example17@example.com', ' example18@example.com', ' example19@example.com', ' example20@example.com', '
    ))

        val = loadvalue
        
        return val
    
    # 邮件发送记录表.邮件主题 <CharField>
    # 
    if mcfieldnamezh == '邮件主题':
        
        # 载入配置成功
        # 给出一些邮件发送记录表表中邮件主题的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '欢迎注册', '产品更新通知', '订单确认', '支付成功', '账户安全提醒', '活动邀请', '会员专享优惠', '新品上市', '调查问卷', '客户反馈', '售后服务', '节日祝福', '生日祝福', '促销信息', '市场调研', '重要通知', '账户余额变动', '密码重置', '物流更新', '感谢您的支持', '
    ))

        val = loadvalue
        
        return val
    
    # 邮件发送记录表.邮件内容 <TextField>
    # 
    if mcfieldnamezh == '邮件内容':
        
        # 载入配置成功
        # 给出一些邮件发送记录表表中邮件内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '这是一封测试邮件，请忽略。', ' 这是第二封邮件，用于演示。', ' 第三封邮件，内容简短。', ' 第四封，关于项目进度的更新。', ', '第五封邮件，询问关于会议的详情。', ' 第六封，分享了一些有用的资源。', ' 第七封，提醒您即将到期的任务。', ', '第八封邮件，感谢您的支持。', ' 第九封，关于产品更新的通知。', ' 第十封，邀请您参加我们的活动。', ', '第十一封邮件，提供了一些反馈。', ' 第十二封，关于订单状态的更新。', ' 第十三封，询问您的意见。', ', '第十四封，分享了一些行业新闻。', ' 第十五封邮件，关于合同签署的提醒。', ' 第十六封，感谢您的购买。', ', '第十七封，关于系统维护的通知。', ' 第十八封，邀请您参加培训。', ' 第十九封，祝您生日快乐！', ' 第二十封，再见，期待您的回复。'
    ))

        val = loadvalue
        
        return val
    
    # 邮件发送记录表.发送时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '发送时间':
        
        # 载入配置成功
        # 给出一些邮件发送记录表表中发送时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 08:00:00', ' 2023-10-23 08:15:30', ' 2023-10-23 08:30:45', ' 2023-10-23 08:45:15', ', '2023-10-23 09:00:00', ' 2023-10-23 09:15:30', ' 2023-10-23 09:30:45', ' 2023-10-23 09:45:15', ', '2023-10-23 10:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 10:30:45', ' 2023-10-23 10:45:15', ', '2023-10-23 11:00:00', ' 2023-10-23 11:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 11:45:15', ', '2023-10-23 12:00:00', ' 2023-10-23 12:15:30', ' 2023-10-23 12:30:45', ' 2023-10-23 12:45:15', '
    ))

        val = loadvalue
        
        return val
    
    # 邮件发送记录表.发送状态如成功、失败、待发送 <CharField>
    # 
    if mcfieldnamezh == '发送状态如成功、失败、待发送':
        
        # 给出一些邮件发送记录表表中发送状态如成功、失败、待发送的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 邮件发送记录表.收件人数量 <IntegerField>
    # 
    if mcfieldnamezh == '收件人数量':
        
        # 给出一些邮件发送记录表表中收件人数量的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 邮件发送记录表.发送者ID关联用户 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '发送者ID关联用户':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 邮件发送记录表.附件数量 <IntegerField>
    # 
    if mcfieldnamezh == '附件数量':
        
        # 给出一些邮件发送记录表表中附件数量的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    
    # 短信发送记录表
    
    # 短信发送记录表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 短信发送记录表.短信内容 <TextField>
    # 
    if mcfieldnamezh == '短信内容':
        
        # 载入配置成功
        # 给出一些短信发送记录表表中短信内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '这是第一条短信内容', '第二条短信内容示例', '第三条测试短信', '第四条信息内容', '第五条问候短信', '第六条推广信息', '第七条通知消息', '第八条活动详情', '第九条验证码信息', '第十条生日祝福', '第十一条问候语', '第十二条广告推送', '第十三条物流通知', '第十四条订单确认', '第十五条系统提示', '第十六条产品介绍', '第十七条优惠券领取', '第十八条活动倒计时', '第十九条会员特权', '第二十条重要通知', '
    ))

        val = loadvalue
        
        return val
    
    # 短信发送记录表.接收者号码 <CharField>
    # 
    if mcfieldnamezh == '接收者号码':
        
        # 给出一些短信发送记录表表中接收者号码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 短信发送记录表.发送者号码 <CharField>
    # 
    if mcfieldnamezh == '发送者号码':
        
        # 给出一些短信发送记录表表中发送者号码的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 短信发送记录表.发送时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '发送时间':
        
        # 载入配置成功
        # 给出一些短信发送记录表表中发送时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 08:00:00', ' 2023-10-23 08:15:30', ' 2023-10-23 08:30:45', ' 2023-10-23 08:45:15', ', '2023-10-23 09:00:00', ' 2023-10-23 09:15:30', ' 2023-10-23 09:30:45', ' 2023-10-23 09:45:15', ', '2023-10-23 10:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 10:30:45', ' 2023-10-23 10:45:15', ', '2023-10-23 11:00:00', ' 2023-10-23 11:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 11:45:15', ', '2023-10-23 12:00:00', ' 2023-10-23 12:15:30', ' 2023-10-23 12:30:45', ' 2023-10-23 12:45:15', '
    ))

        val = loadvalue
        
        return val
    
    # 短信发送记录表.发送状态如成功、失败、待发送 <CharField>
    # 
    if mcfieldnamezh == '发送状态如成功、失败、待发送':
        
        # 给出一些短信发送记录表表中发送状态如成功、失败、待发送的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 短信发送记录表.重试次数 <CharField>
    # 
    if mcfieldnamezh == '重试次数':
        
        # 载入配置成功
        # 给出一些短信发送记录表表中重试次数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '1', ' 2', ' 3', ' 4', ' 5', ' 6', ' 7', ' 8', ' 9', ' 10', ' 11', ' 12', ' 13', ' 14', ' 15', ' 16', ' 17', ' 18', ' 19', ' 20', '
    ))

        val = loadvalue
        
        return val
    
    # 短信发送记录表.错误信息如果发送失败 <CharField>
    # 
    if mcfieldnamezh == '错误信息如果发送失败':
        
        # 载入配置成功
        # 给出一些短信发送记录表表中错误信息如果发送失败的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '发送失败，网络错误', ', '邮件发送失败，服务器无响应', ', '短信发送失败，超出日发送限制', ', '推送通知发送失败，设备未连接', ', '文件传输失败，目标路径不存在', ', '数据库写入失败，字段验证错误', ', 'API请求发送失败，认证信息错误', ', '消息队列发送失败，队列已满', ', 'WebSocket发送失败，连接已关闭', ', 'FTP上传失败，登录凭证无效', ', 'HTTP请求发送失败，超时', ', 'SFTP传输失败，权限不足', ', '数据同步失败，源数据已更改', ', '实时流发送失败，流已关闭', ', '文件下载失败，文件不存在', ', '图片上传失败，文件大小超过限制', ', '视频流发送失败，编码问题', ', '日志记录失败，磁盘空间不足', ', '更新记录失败，并发冲突', ', '通知服务发送失败，服务未启动'
    ))

        val = loadvalue
        
        return val
    
    # 短信发送记录表.是否已读标记接收者是否已查看短信 <BooleanField>
    # 
    if mcfieldnamezh == '是否已读标记接收者是否已查看短信':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 短信发送记录表.关联任务ID如果短信发送与某个特定任务相关 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联任务ID如果短信发送与某个特定任务相关':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 附件表
    
    # 附件表.附件ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '附件ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件表.文件名 <FileField>
    # 
    if mcfieldnamezh == '文件名':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件表.文件存储路径 <FileField>
    # 
    if mcfieldnamezh == '文件存储路径':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件表.文件大小 <FileField>
    # 
    if mcfieldnamezh == '文件大小':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件表.文件类型 <FileField>
    # 
    if mcfieldnamezh == '文件类型':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件表.上传时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '上传时间':
        
        # 载入配置成功
        # 给出一些附件表表中上传时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-03-15 09:00:00', ' 2023-03-15 10:15:30', ' 2023-03-15 11:30:45', ' 2023-03-15 12:45:15', ', '2023-03-15 14:00:00', ' 2023-03-15 15:15:30', ' 2023-03-15 16:30:45', ' 2023-03-15 17:45:15', ', '2023-03-16 08:00:00', ' 2023-03-16 09:15:30', ' 2023-03-16 10:30:45', ' 2023-03-16 11:45:15', ', '2023-03-16 13:00:00', ' 2023-03-16 14:15:30', ' 2023-03-16 15:30:45', ' 2023-03-16 16:45:15', ', '2023-03-17 07:00:00', ' 2023-03-17 08:15:30', ' 2023-03-17 09:30:45', ' 2023-03-17 10:45:15', '
    ))

        val = loadvalue
        
        return val
    
    # 附件表.创建者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件表.创建者姓名 <CharField>
    # 
    if mcfieldnamezh == '创建者姓名':
        
        # 给出一些附件表表中创建者姓名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 附件表.关联周报ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联周报ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件表.描述 <TextField>
    # 
    if mcfieldnamezh == '描述':
        
        # 载入配置成功
        # 给出一些附件表表中描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1描述', ' 字段2描述', ' 字段3详细信息', ' 列4的用途', ' 数据5的含义', ' 特性6的说明', ' 属性7的注解', ' 值8的上下文', ' 列9的用途说明', ' 字段10的简短描述', ' 列11的详细解释', ' 数据12的用途', ' 特性13的简短说明', ' 属性14的详细描述', ' 值15的上下文解释', ' 字段16的用途', ' 列17的额外信息', ' 数据18的备注', ' 字段19的用途描述', ' 列20的简短注解', '
    ))

        val = loadvalue
        
        return val
    
    
    # 附件类型表
    
    # 附件类型表.附件类型ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '附件类型ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件类型表.附件类型名称 <CharField>
    # 
    if mcfieldnamezh == '附件类型名称':
        
        # 给出一些附件类型表表中附件类型名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 附件类型表.描述 <TextField>
    # 
    if mcfieldnamezh == '描述':
        
        # 载入配置成功
        # 给出一些附件类型表表中描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1描述', ' 字段2描述', ' 字段3详细信息', ' 列4的用途', ' 数据5的含义', ' 特性6的说明', ' 属性7的注解', ' 值8的上下文', ' 列9的用途说明', ' 字段10的简短描述', ' 列11的详细解释', ' 数据12的用途', ' 特性13的简短说明', ' 属性14的详细描述', ' 值15的上下文解释', ' 字段16的用途', ' 列17的额外信息', ' 数据18的备注', ' 字段19的用途描述', ' 列20的简短注解', '
    ))

        val = loadvalue
        
        return val
    
    # 附件类型表.文件扩展名 <FileField>
    # 
    if mcfieldnamezh == '文件扩展名':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件类型表.最大文件大小单位MB <FileField>
    # 
    if mcfieldnamezh == '最大文件大小单位MB':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件类型表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些附件类型表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 附件类型表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些附件类型表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 附件类型表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 附件类型表.创建者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 附件类型表.更新者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 报告提交历史表
    
    # 报告提交历史表.报告ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告提交历史表.提交日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '提交日期':
        
        # 载入配置成功
        # 给出一些报告提交历史表表中提交日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-01-01', ' 2023-01-02', ' 2023-01-03', ' 2023-01-04', ' 2023-01-05', ', '2023-01-06', ' 2023-01-07', ' 2023-01-08', ' 2023-01-09', ' 2023-01-10', ', '2023-01-11', ' 2023-01-12', ' 2023-01-13', ' 2023-01-14', ' 2023-01-15', ', '2023-01-16', ' 2023-01-17', ' 2023-01-18', ' 2023-01-19', ' 2023-01-20', '
    ))

        val = loadvalue
        
        return val
    
    # 报告提交历史表.员工ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '员工ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告提交历史表.报告标题 <CharField>
    # 
    if mcfieldnamezh == '报告标题':
        
        # 载入配置成功
        # 给出一些报告提交历史表表中报告标题的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023年度销售报告', ' Q2财务分析报告', ' 市场调研报告', ' 产品用户反馈报告', ' 项目进度报告', ' 年度营销计划报告', ' 人力资源分析报告', ' 客户满意度调查报告', ' 技术更新报告', ' 竞争对手分析报告', ' 市场趋势预测报告', ' 内部审核报告', ' 供应链优化报告', ' 风险评估报告', ' 产品测试报告', ' 环境影响评估报告', ' 新产品发布报告', ' 员工培训报告', ' 客户服务质量报告', ' 社交媒体影响力报告', '
    ))

        val = loadvalue
        
        return val
    
    # 报告提交历史表.报告描述 <TextField>
    # 
    if mcfieldnamezh == '报告描述':
        
        # 给出一些报告提交历史表表中报告描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告提交历史表.状态 <CharField>
    # 
    if mcfieldnamezh == '状态':
        
        # 载入配置成功
        # 给出一些报告提交历史表表中状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待处理', '已处理', '处理中', '已完成', '已取消', '待审核', '审核通过', '审核失败', '待发货', '已发货', '运输中', '已签收', '退货中', '已退货', '退款中', '已退款', '待支付', '已支付', '支付失败', '未知状态', '
    ))

        val = loadvalue
        
        return val
    
    # 报告提交历史表.审批日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '审批日期':
        
        # 载入配置成功
        # 给出一些报告提交历史表表中审批日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-07-01', ' 2023-07-02', ' 2023-07-03', ' 2023-07-04', ' 2023-07-05', ' 2023-07-06', ' 2023-07-07', ' 2023-07-08', ' 2023-07-09', ' 2023-07-10', ' 2023-07-11', ' 2023-07-12', ' 2023-07-13', ' 2023-07-14', ' 2023-07-15', ' 2023-07-16', ' 2023-07-17', ' 2023-07-18', ' 2023-07-19', ' 2023-07-20', '
    ))

        val = loadvalue
        
        return val
    
    # 报告提交历史表.审批人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '审批人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告提交历史表.部门ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 报告修改历史表
    
    # 报告修改历史表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告修改历史表.关联的报告ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联的报告ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告修改历史表.修改时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '修改时间':
        
        # 载入配置成功
        # 给出一些报告修改历史表表中修改时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:00:00Z', ' 2023-10-23T09:15:30Z', ' 2023-10-23T09:30:45Z', ' 2023-10-23T09:45:15Z', ', '2023-10-23T10:00:00Z', ' 2023-10-23T10:15:30Z', ' 2023-10-23T10:30:45Z', ' 2023-10-23T10:45:15Z', ', '2023-10-23T11:00:00Z', ' 2023-10-23T11:15:30Z', ' 2023-10-23T11:30:45Z', ' 2023-10-23T11:45:15Z', ', '2023-10-23T12:00:00Z', ' 2023-10-23T12:15:30Z', ' 2023-10-23T12:30:45Z', ' 2023-10-23T12:45:15Z', ', '2023-10-23T13:00:00Z', ' 2023-10-23T13:15:30Z', ' 2023-10-23T13:30:45Z', ' 2023-10-23T13:45:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 报告修改历史表.修改者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '修改者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告修改历史表.修改前的内容摘要 <TextField>
    # 
    if mcfieldnamezh == '修改前的内容摘要':
        
        # 给出一些报告修改历史表表中修改前的内容摘要的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告修改历史表.修改后的内容摘要 <TextField>
    # 
    if mcfieldnamezh == '修改后的内容摘要':
        
        # 给出一些报告修改历史表表中修改后的内容摘要的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告修改历史表.修改类型如内容更新、状态变更等 <TextField>
    # 
    if mcfieldnamezh == '修改类型如内容更新、状态变更等':
        
        # 给出一些报告修改历史表表中修改类型如内容更新、状态变更等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告修改历史表.修改备注 <CharField>
    # 
    if mcfieldnamezh == '修改备注':
        
        # 给出一些报告修改历史表表中修改备注的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告修改历史表.是否为最新修改用于快速检索最新记录 <BooleanField>
    # 
    if mcfieldnamezh == '是否为最新修改用于快速检索最新记录':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    
    # 报告评论表
    
    # 报告评论表.评论ID <TextField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '评论ID':
        
        # 载入配置成功
        # 给出一些报告评论表表中评论ID的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'comment_id1', ' comment_id2', ' comment_id3', ' comment_id4', ' comment_id5', ' comment_id6', ' comment_id7', ' comment_id8', ' comment_id9', ' comment_id10', ' comment_id11', ' comment_id12', ' comment_id13', ' comment_id14', ' comment_id15', ' comment_id16', ' comment_id17', ' comment_id18', ' comment_id19', ' comment_id20', '
    ))

        val = loadvalue
        
        return val
    
    # 报告评论表.报告ID关联字段指向报告的ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告ID关联字段指向报告的ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告评论表.用户ID关联字段指向用户的ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '用户ID关联字段指向用户的ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告评论表.评论内容 <TextField>
    # 
    if mcfieldnamezh == '评论内容':
        
        # 载入配置成功
        # 给出一些报告评论表表中评论内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '这是一个很好的产品', ' 我喜欢这个设计', ' 功能很强大', ' 价格合理', ' 服务周到', ' 发货速度快', ' 非常满意', ' 期待下次购买', ' 质量不错', ' 颜色很好看', ' 推荐给大家', ' 性价比高', ' 使用很方便', ' 操作简单易懂', ' 非常满意的一次购物', ' 物流很快', ' 包装完好', ' 卖家态度好', ' 值得购买', ' 谢谢！'
    ))

        val = loadvalue
        
        return val
    
    # 报告评论表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些报告评论表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 报告评论表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些报告评论表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 报告评论表.是否删除逻辑删除标记 <BooleanField>
    # 
    if mcfieldnamezh == '是否删除逻辑删除标记':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报告评论表.评分可选用于示用户对报告的评分 <IntegerField>
    # 
    if mcfieldnamezh == '评分可选用于示用户对报告的评分':
        
        # 给出一些报告评论表表中评分可选用于示用户对报告的评分的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告评论表.评论状态如待审核、已审核、隐藏等 <TextField>
    # 
    if mcfieldnamezh == '评论状态如待审核、已审核、隐藏等':
        
        # 给出一些报告评论表表中评论状态如待审核、已审核、隐藏等的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    
    # 评论回复表
    
    # 评论回复表.回复ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '回复ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 评论回复表.评论ID关联字段指向评论的ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '评论ID关联字段指向评论的ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 评论回复表.用户ID关联字段指向用户的ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '用户ID关联字段指向用户的ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 评论回复表.回复内容 <TextField>
    # 
    if mcfieldnamezh == '回复内容':
        
        # 载入配置成功
        # 给出一些评论回复表表中回复内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '这是一个很好的问题', ' 谢谢你的帮助', ' 不客气，随时欢迎', ' 我很高兴能帮助你', ' 你的建议很有用', ' 我会考虑的', ' 期待你的回复', ' 请提供更多信息', ' 好的，我明白了', ' 我会尽快处理', ' 谢谢你的耐心等待', ' 这个问题有点复杂', ' 我会进一步调查', ' 请保持联系', ' 我会给你更新的', ' 再次感谢你的支持', ' 希望这能满足你的需求', ' 如果有其他问题，请告诉我', ' 祝你有愉快的一天', ' 再见！'
    ))

        val = loadvalue
        
        return val
    
    # 评论回复表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些评论回复表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 评论回复表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些评论回复表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 评论回复表.是否删除逻辑删除标记 <BooleanField>
    # 
    if mcfieldnamezh == '是否删除逻辑删除标记':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 评论回复表.点赞数 <CharField>
    # 
    if mcfieldnamezh == '点赞数':
        
        # 载入配置成功
        # 给出一些评论回复表表中点赞数的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '点赞数1', ' 点赞数2', ' 点赞数3', ' 点赞数4', ' 点赞数5', ' 点赞数6', ' 点赞数7', ' 点赞数8', ' 点赞数9', ' 点赞数10', ' 点赞数11', ' 点赞数12', ' 点赞数13', ' 点赞数14', ' 点赞数15', ' 点赞数16', ' 点赞数17', ' 点赞数18', ' 点赞数19', ' 点赞数20', '
    ))

        val = loadvalue
        
        return val
    
    # 评论回复表.回复的回复ID用于构建回复链关联字段指向本的ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '回复的回复ID用于构建回复链关联字段指向本的ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 报告评分表
    
    # 报告评分表.报告ID唯一标识一个报告 <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告ID唯一标识一个报告':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告评分表.评分示对报告的评分可以是数值类型 <IntegerField>
    # 
    if mcfieldnamezh == '评分示对报告的评分可以是数值类型':
        
        # 给出一些报告评分表表中评分示对报告的评分可以是数值类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告评分表.评分者ID示哪个用户或系统对报告进行了评分 <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '评分者ID示哪个用户或系统对报告进行了评分':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报告评分表.报告日期报告提交的日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报告日期报告提交的日期':
        
        # 给出一些报告评分表表中报告日期报告提交的日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告评分表.评分日期对报告进行评分的日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '评分日期对报告进行评分的日期':
        
        # 给出一些报告评分表表中评分日期对报告进行评分的日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告评分表.评语对报告的额外评语或反馈 <CharField>
    # 
    if mcfieldnamezh == '评语对报告的额外评语或反馈':
        
        # 给出一些报告评分表表中评语对报告的额外评语或反馈的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报告评分表.是否通过示报告是否通过审核 <BooleanField>
    # 
    if mcfieldnamezh == '是否通过示报告是否通过审核':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报告评分表.类别ID关联字段示报告所属的类别 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '类别ID关联字段示报告所属的类别':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 评分标准表
    
    # 评分标准表.唯一标识符 <UUIDField>
    # 
    if mcfieldnamezh == '唯一标识符':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 评分标准表.评分标准名称 <IntegerField>
    # 
    if mcfieldnamezh == '评分标准名称':
        
        # 给出一些评分标准表表中评分标准名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 评分标准表.描述 <TextField>
    # 
    if mcfieldnamezh == '描述':
        
        # 载入配置成功
        # 给出一些评分标准表表中描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1描述', ' 字段2描述', ' 字段3详细信息', ' 列4的用途', ' 数据5的含义', ' 特性6的说明', ' 属性7的注解', ' 值8的上下文', ' 列9的用途说明', ' 字段10的简短描述', ' 列11的详细解释', ' 数据12的用途', ' 特性13的简短说明', ' 属性14的详细描述', ' 值15的上下文解释', ' 字段16的用途', ' 列17的额外信息', ' 数据18的备注', ' 字段19的用途描述', ' 列20的简短注解', '
    ))

        val = loadvalue
        
        return val
    
    # 评分标准表.类别 <CharField>
    # 
    if mcfieldnamezh == '类别':
        
        # 载入配置成功
        # 给出一些评分标准表表中类别的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '科技', ' 教育', ' 娱乐', ' 体育', ' 健康', ' 美食', ' 旅游', ' 汽车', ' 房产', ' 金融', ' 时尚', ' 家居', ' 母婴', ' 游戏', ' 电影', ' 音乐', ' 图书', ' 动漫', ' 宠物', ' 摄影', '
    ))

        val = loadvalue
        
        return val
    
    # 评分标准表.权重 <CharField>
    # 
    if mcfieldnamezh == '权重':
        
        # 载入配置成功
        # 给出一些评分标准表表中权重的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '权重1', ' 权重2', ' 权重3', ' 权重4', ' 权重5', ' 权重6', ' 权重7', ' 权重8', ' 权重9', ' 权重10', ' 权重11', ' 权重12', ' 权重13', ' 权重14', ' 权重15', ' 权重16', ' 权重17', ' 权重18', ' 权重19', ' 权重20', '
    ))

        val = loadvalue
        
        return val
    
    # 评分标准表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 评分标准表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些评分标准表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 评分标准表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些评分标准表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 评分标准表.关联项目ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联项目ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 评分标准表.关联项目类型 <SelectField>
    # 
    if mcfieldnamezh == '关联项目类型':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 权限表
    
    # 权限表.权限ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '权限ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限表.权限名称 <CharField>
    # 
    if mcfieldnamezh == '权限名称':
        
        # 载入配置成功
        # 给出一些权限表表中权限名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '读取权限', ' 写入权限', ' 编辑权限', ' 删除权限', ' 查看报告', ' 导出数据', ' 导入数据', ' 管理用户', ' 配置设置', ' 发送通知', ' 审核内容', ' 发布内容', ' 禁用账户', ' 启用账户', ' 重置密码', ' 访问后台', ' 查看日志', ' 下载文件', ' 上传文件', ' 执行命令', '
    ))

        val = loadvalue
        
        return val
    
    # 权限表.权限描述 <TextField>
    # 
    if mcfieldnamezh == '权限描述':
        
        # 载入配置成功
        # 给出一些权限表表中权限描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '读取数据', ' 写入数据', ' 修改数据', ' 删除数据', ' 导出数据', ' 导入数据', ' 查看报告', ' 生成报告', ' 管理用户', ' 分配权限', ' 设置角色', ' 审核数据', ' 发布内容', ' 撤销内容', ' 备份数据库', ' 恢复数据库', ' 访问日志', ' 修改密码', ' 禁用账户', ' 启用账户', ', 'INSERT INTO permissions (description) VALUES', '(读取数据)', ', '(写入数据)', ', '(修改数据)', ', '-- ... 以此类推，为其他权限描述添加更多的INSERT语句', ';'
    ))

        val = loadvalue
        
        return val
    
    # 权限表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些权限表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 权限表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些权限表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 权限表.是否激活用于控制权限是否可用 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活用于控制权限是否可用':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 权限表.父权限ID用于构建权限层级关系 <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '父权限ID用于构建权限层级关系':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限表.关联角色ID示该权限属于哪个角色 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联角色ID示该权限属于哪个角色':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限表.所属系统模块标识权限属于哪个系统模块或功能区域 <CharField>
    # 
    if mcfieldnamezh == '所属系统模块标识权限属于哪个系统模块或功能区域':
        
        # 给出一些权限表表中所属系统模块标识权限属于哪个系统模块或功能区域的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    
    # 权限角色关联表
    
    # 权限角色关联表.权限ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '权限ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限角色关联表.角色ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '角色ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限角色关联表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些权限角色关联表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 权限角色关联表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些权限角色关联表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 权限角色关联表.创建者ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建者ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 权限角色关联表.是否激活用于控制权限是否有效 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活用于控制权限是否有效':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 权限角色关联表.描述信息 <TextField>
    # 
    if mcfieldnamezh == '描述信息':
        
        # 载入配置成功
        # 给出一些权限角色关联表表中描述信息的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '姓名', '年龄', '性别', '生日', '地址', '邮编', '电话', '电子邮件', '职业', '学历', '公司名', '部门', '职位', '入职日期', '离职日期', '薪资', '工作内容', '技能', '兴趣爱好', '备注', ', 'CREATE TABLE employees (', '姓名 VARCHAR(50)', ', '年龄 INT', ', '性别 VARCHAR(10)', ', '-- ... 其他字段定义 ...', '备注 TEXT', ');'
    ))

        val = loadvalue
        
        return val
    
    
    # 系统日志表
    
    # 系统日志表.日志ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '日志ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 系统日志表.日志时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '日志时间':
        
        # 载入配置成功
        # 给出一些系统日志表表中日志时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 09:15:30', ' 2023-10-23 09:30:45', ' 2023-10-23 09:45:15', ', '2023-10-23 10:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 10:30:45', ' 2023-10-23 10:45:15', ', '2023-10-23 11:00:00', ' 2023-10-23 11:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 11:45:15', ', '2023-10-23 12:00:00', ' 2023-10-23 12:15:30', ' 2023-10-23 12:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 13:00:00', ' 2023-10-23 13:15:30', ' 2023-10-23 13:30:45', ' 2023-10-23 13:45:15', '
    ))

        val = loadvalue
        
        return val
    
    # 系统日志表.用户ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '用户ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 系统日志表.操作类型 <CharField>
    # 
    if mcfieldnamezh == '操作类型':
        
        # 载入配置成功
        # 给出一些系统日志表表中操作类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '创建', ' 更新', ' 删除', ' 查询', ' 导入', ' 导出', ' 备份', ' 恢复', ' 审核', ' 批准', ' 拒绝', ' 取消', ' 提交', ' 发布', ' 下架', ' 归档', ' 移动', ' 复制', ' 重命名', ' 修改权限', '
    ))

        val = loadvalue
        
        return val
    
    # 系统日志表.模块名称 <CharField>
    # 
    if mcfieldnamezh == '模块名称':
        
        # 给出一些系统日志表表中模块名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 系统日志表.描述信息 <TextField>
    # 
    if mcfieldnamezh == '描述信息':
        
        # 载入配置成功
        # 给出一些系统日志表表中描述信息的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '姓名', '年龄', '性别', '生日', '地址', '邮编', '电话', '电子邮件', '职业', '学历', '公司名', '部门', '职位', '入职日期', '离职日期', '薪资', '工作内容', '技能', '兴趣爱好', '备注', ', 'CREATE TABLE employees (', '姓名 VARCHAR(50)', ', '年龄 INT', ', '性别 VARCHAR(10)', ', '-- ... 其他字段定义 ...', '备注 TEXT', ');'
    ))

        val = loadvalue
        
        return val
    
    # 系统日志表.操作结果 <CharField>
    # 
    if mcfieldnamezh == '操作结果':
        
        # 载入配置成功
        # 给出一些系统日志表表中操作结果的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '成功', '失败', '部分成功', '超时', '取消', '等待中', '处理中', '已拒绝', '已接受', '已提交', '已审核', '已批准', '已拒绝（原因：无效数据）', '已拒绝（原因：权限不足）', '已完成', '已退回', '已重新提交', '已暂停', '已恢复', '未知结果', '
    ))

        val = loadvalue
        
        return val
    
    # 系统日志表.地址 <TextField>
    # 
    if mcfieldnamezh == '地址':
        
        # 载入配置成功
        # 给出一些系统日志表表中地址的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '北京市朝阳区三里屯路1号', ' 上海市浦东新区世纪大道100号', ' 广州市天河区珠江新城华夏路8号', ' 深圳市福田区福华三路88号', ' 杭州市西湖区文三路478号', ' 成都市锦江区红星路二段99号', ' 重庆市渝中区解放碑步行街1号', ' 天津市和平区南京路123号', ' 北京市西城区金融大街1号', ' 上海市黄浦区南京东路200号', ' 广州市越秀区中山五路33号', ' 深圳市罗湖区深南东路5002号', ' 杭州市拱墅区莫干山路111号', ' 南京市秦淮区中山南路89号', ' 武汉市江汉区解放大道688号', ' 西安市碑林区南大街1号', ' 沈阳市和平区中山路123号', ' 长沙市天心区黄兴南路步行街88号', ' 青岛市市南区香港中路10号', ' 厦门市思明区中山路步行街1号', '
    ))

        val = loadvalue
        
        return val
    
    # 系统日志表.关联ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 报表配置表
    
    # 报表配置表.报ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表配置表.报名称 <CharField>
    # 
    if mcfieldnamezh == '报名称':
        
        # 给出一些报表配置表表中报名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表配置表.报描述 <TextField>
    # 
    if mcfieldnamezh == '报描述':
        
        # 给出一些报表配置表表中报描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表配置表.创建者 <CharField>
    # 
    if mcfieldnamezh == '创建者':
        
        # 载入配置成功
        # 给出一些报表配置表表中创建者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ', 'Kevin', ' Laura', ' Michael', ' Nina', ' Oliver', ' Patricia', ' Quentin', ' Rachel', ' Samuel', ' Tina', '
    ))

        val = loadvalue
        
        return val
    
    # 报表配置表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些报表配置表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 报表配置表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些报表配置表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    # 报表配置表.是否激活 <BooleanField>
    # 
    if mcfieldnamezh == '是否激活':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报表配置表.报告频率 <CharField>
    # 
    if mcfieldnamezh == '报告频率':
        
        # 给出一些报表配置表表中报告频率的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表配置表.部门ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '部门ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 报表导出记录表
    
    # 报表导出记录表.记录ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '记录ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表导出记录表.报ID关联报 <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报ID关联报':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表导出记录表.导出时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '导出时间':
        
        # 给出一些报表导出记录表表中导出时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表导出记录表.导出用户 <CharField>
    # 
    if mcfieldnamezh == '导出用户':
        
        # 给出一些报表导出记录表表中导出用户的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表导出记录表.导出格式如PDF <CharField>
    # 
    if mcfieldnamezh == '导出格式如PDF':
        
        # 给出一些报表导出记录表表中导出格式如PDF的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表导出记录表.文件名 <FileField>
    # 
    if mcfieldnamezh == '文件名':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表导出记录表.文件存储路径 <FileField>
    # 
    if mcfieldnamezh == '文件存储路径':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表导出记录表.文件大小单位KB <FileField>
    # 
    if mcfieldnamezh == '文件大小单位KB':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表导出记录表.导出状态如成功、失败 <CharField>
    # 
    if mcfieldnamezh == '导出状态如成功、失败':
        
        # 给出一些报表导出记录表表中导出状态如成功、失败的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表导出记录表.错误信息如果导出失败 <CharField>
    # 
    if mcfieldnamezh == '错误信息如果导出失败':
        
        # 给出一些报表导出记录表表中错误信息如果导出失败的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    
    # 报表模板字段表
    
    # 报表模板字段表.模板ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '模板ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表模板字段表.字段名称 <CharField>
    # 
    if mcfieldnamezh == '字段名称':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中字段名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1', ' 字段2', ' 字段3', ' 字段4', ' 字段5', ' 字段6', ' 字段7', ' 字段8', ' 字段9', ' 字段10', ' 字段11', ' 字段12', ' 字段13', ' 字段14', ' 字段15', ' 字段16', ' 字段17', ' 字段18', ' 字段19', ' 字段20', ', 'CREATE TABLE my_table (', '字段1 INT', ', '字段2 VARCHAR(255)', ', '字段3 DATE', ', '-- ... 其他字段 ...', '字段20 TEXT', ');', 'SELECT 字段1', ' 字段2', ' 字段3', ' ... ', ' 字段20', 'FROM my_table;'
    ))

        val = loadvalue
        
        return val
    
    # 报表模板字段表.字段类型 <CharField>
    # 
    if mcfieldnamezh == '字段类型':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中字段类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'id INT PRIMARY KEY', ' name VARCHAR(255)', ' email VARCHAR(255)', ' phone VARCHAR(20)', ' address TEXT', ' age INT', ' gender ENUM(Male', ' Female', ' Other)', ' birthdate DATE', ' occupation VARCHAR(100)', ' salary DECIMAL(10', '2)', ' is_active BOOLEAN', ' created_at TIMESTAMP', ' updated_at TIMESTAMP', ' profile_picture BLOB', ' description TEXT', ' latitude DECIMAL(9', '6)', ' longitude DECIMAL(9', '6)', ' country VARCHAR(100)', ' city VARCHAR(100)', ' zipcode VARCHAR(20)', ' user_type ENUM(Admin', ' User', ' Guest)', '
    ))

        val = loadvalue
        
        return val
    
    # 报表模板字段表.是否必填 <BooleanField>
    # 
    if mcfieldnamezh == '是否必填':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报表模板字段表.默认值 <CharField>
    # 
    if mcfieldnamezh == '默认值':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中默认值的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'default1', ' example text 2', ' third default', ' fourth string', ' 5th default', ' six', ' seven', ' eight', ' nine', ' ten', ' eleven', ' twelve', ' thirteen', ' fourteen', ' fifteen', ' sixteen', ' seventeen', ' eighteen', ' nineteen', ' twenty', ', 'CREATE TABLE example_table (', 'id INT PRIMARY KEY', ', 'name VARCHAR(255) NOT NULL', ', 'email VARCHAR(255) DEFAULT example@example.com', ', 'age INT DEFAULT 30', ', 'is_active BOOLEAN DEFAULT true', ', 'created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP', ', '-- 其他字段...', ');'
    ))

        val = loadvalue
        
        return val
    
    # 报表模板字段表.描述 <TextField>
    # 
    if mcfieldnamezh == '描述':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1描述', ' 字段2描述', ' 字段3详细信息', ' 列4的用途', ' 数据5的含义', ' 特性6的说明', ' 属性7的注解', ' 值8的上下文', ' 列9的用途说明', ' 字段10的简短描述', ' 列11的详细解释', ' 数据12的用途', ' 特性13的简短说明', ' 属性14的详细描述', ' 值15的上下文解释', ' 字段16的用途', ' 列17的额外信息', ' 数据18的备注', ' 字段19的用途描述', ' 列20的简短注解', '
    ))

        val = loadvalue
        
        return val
    
    # 报表模板字段表.排序顺序 <CharField>
    # 
    if mcfieldnamezh == '排序顺序':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中排序顺序的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'ORDER BY', 'field1', ' field2', ' field3', ' field4', ' field5', ', 'field6', ' field7', ' field8', ' field9', ' field10', ', 'field11', ' field12', ' field13', ' field14', ' field15', ', 'field16', ' field17', ' field18', ' field19', ' field20', ', 'ORDER BY', 'field1', ' field2', ' field3', ' field4', ' field5', ', 'field6', ' field7', ' field8', ' field9', ' field10', ', 'field11', ' field12', ' field13', ' field14', ' field15', ', 'field16', ' field17', ' field18', ' field19', ' field20'
    ))

        val = loadvalue
        
        return val
    
    # 报表模板字段表.创建人 <CharField>
    # 
    if mcfieldnamezh == '创建人':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中创建人的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ' Katherine', ' Lucas', ' Maria', ' Nathan', ' Olivia', ' Peter', ' Quincy', ' Rachel', ' Samuel', ' Tina', ', 'INSERT INTO your_table_name (creators) VALUES', '(Alice)', ', '(Bob)', ', '(Charlie)', ', '... -- 以此类推，为其他名称添加相应的值', '(Tina);'
    ))

        val = loadvalue
        
        return val
    
    # 报表模板字段表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 报表模板字段表.更新人 <CharField>
    # 
    if mcfieldnamezh == '更新人':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中更新人的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '张三', ' 李四', ' 王五', ' 赵六', ' 孙七', ' 周八', ' 吴九', ' 郑十', ' 陈十一', ' 刘十二', ' 黄十三', ' 高十四', ' 林十五', ' 何十六', ' 郭十七', ' 马十八', ' 罗十九', ' 梁二十', ' 谢二十一', ' 宋二十二', '
    ))

        val = loadvalue
        
        return val
    
    # 报表模板字段表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些报表模板字段表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    
    # 报表字段类型表
    
    # 报表字段类型表.报字段类型ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报字段类型ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表字段类型表.字段名称 <CharField>
    # 
    if mcfieldnamezh == '字段名称':
        
        # 载入配置成功
        # 给出一些报表字段类型表表中字段名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '字段1', ' 字段2', ' 字段3', ' 字段4', ' 字段5', ' 字段6', ' 字段7', ' 字段8', ' 字段9', ' 字段10', ' 字段11', ' 字段12', ' 字段13', ' 字段14', ' 字段15', ' 字段16', ' 字段17', ' 字段18', ' 字段19', ' 字段20', ', 'CREATE TABLE my_table (', '字段1 INT', ', '字段2 VARCHAR(255)', ', '字段3 DATE', ', '-- ... 其他字段 ...', '字段20 TEXT', ');', 'SELECT 字段1', ' 字段2', ' 字段3', ' ... ', ' 字段20', 'FROM my_table;'
    ))

        val = loadvalue
        
        return val
    
    # 报表字段类型表.字段类型如VARCHAR <CharField>
    # 
    if mcfieldnamezh == '字段类型如VARCHAR':
        
        # 给出一些报表字段类型表表中字段类型如VARCHAR的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表字段类型表.最大长度针对类型 <CharField>
    # 
    if mcfieldnamezh == '最大长度针对类型':
        
        # 给出一些报表字段类型表表中最大长度针对类型的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表字段类型表.是否可为空是否 <BooleanField>
    # 
    if mcfieldnamezh == '是否可为空是否':
        
        val = faker.random.choice(('1', '0'))
        
        return val
    
    # 报表字段类型表.默认值 <CharField>
    # 
    if mcfieldnamezh == '默认值':
        
        # 载入配置成功
        # 给出一些报表字段类型表表中默认值的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'default1', ' example text 2', ' third default', ' fourth string', ' 5th default', ' six', ' seven', ' eight', ' nine', ' ten', ' eleven', ' twelve', ' thirteen', ' fourteen', ' fifteen', ' sixteen', ' seventeen', ' eighteen', ' nineteen', ' twenty', ', 'CREATE TABLE example_table (', 'id INT PRIMARY KEY', ', 'name VARCHAR(255) NOT NULL', ', 'email VARCHAR(255) DEFAULT example@example.com', ', 'age INT DEFAULT 30', ', 'is_active BOOLEAN DEFAULT true', ', 'created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP', ', '-- 其他字段...', ');'
    ))

        val = loadvalue
        
        return val
    
    # 报表字段类型表.字段描述 <TextField>
    # 
    if mcfieldnamezh == '字段描述':
        
        # 载入配置成功
        # 给出一些报表字段类型表表中字段描述的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '用户ID', '用户名', '用户邮箱', '用户密码', '注册时间', '最后登录时间', '用户状态', '手机号码', '性别', '生日', '地址', '邮编', '国家', '省份', '城市', '公司名', '职位', '个人简介', '头像URL', '备注', '
    ))

        val = loadvalue
        
        return val
    
    # 报表字段类型表.创建人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表字段类型表.创建时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '创建时间':
        
        # 载入配置成功
        # 给出一些报表字段类型表表中创建时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23T09:15:30Z', ' 2023-10-22T14:45:12Z', ' 2023-10-21T21:30:00Z', ' 2023-10-20T12:15:45Z', ', '2023-10-19T08:30:15Z', ' 2023-10-18T17:00:00Z', ' 2023-10-17T10:45:30Z', ' 2023-10-16T15:15:15Z', ', '2023-10-15T22:00:00Z', ' 2023-10-14T11:30:45Z', ' 2023-10-13T06:45:15Z', ' 2023-10-12T19:00:00Z', ', '2023-10-11T13:15:30Z', ' 2023-10-10T07:45:12Z', ' 2023-10-09T20:30:00Z', ' 2023-10-08T11:15:45Z', ', '2023-10-07T05:00:15Z', ' 2023-10-06T18:30:00Z', ' 2023-10-05T12:45:30Z', ' 2023-10-04T09:15:15Z', '
    ))

        val = loadvalue
        
        return val
    
    # 报表字段类型表.更新人ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新人ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表字段类型表.更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '更新时间':
        
        # 载入配置成功
        # 给出一些报表字段类型表表中更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:00:00', ' 2023-10-23 10:15:30', ' 2023-10-23 11:30:45', ' 2023-10-23 12:45:15', ', '2023-10-23 14:00:00', ' 2023-10-23 15:15:30', ' 2023-10-23 16:30:45', ' 2023-10-23 17:45:15', ', '2023-10-24 08:00:00', ' 2023-10-24 09:15:30', ' 2023-10-24 10:30:45', ' 2023-10-24 11:45:15', ', '2023-10-24 13:00:00', ' 2023-10-24 14:15:30', ' 2023-10-24 15:30:45', ' 2023-10-24 16:45:15', ', '2023-10-25 07:00:00', ' 2023-10-25 08:15:30', ' 2023-10-25 09:30:45', '
    ))

        val = loadvalue
        
        return val
    
    
    # 报表数据表
    
    # 报表数据表.报ID <UUIDField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表数据表.报名称 <CharField>
    # 
    if mcfieldnamezh == '报名称':
        
        # 给出一些报表数据表表中报名称的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表数据表.报日期 <DateField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '报日期':
        
        # 给出一些报表数据表表中报日期的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表数据表.创建者 <CharField>
    # 
    if mcfieldnamezh == '创建者':
        
        # 载入配置成功
        # 给出一些报表数据表表中创建者的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'Alice', ' Bob', ' Charlie', ' David', ' Eva', ' Frank', ' Grace', ' Henry', ' Isabella', ' Jack', ', 'Kevin', ' Laura', ' Michael', ' Nina', ' Oliver', ' Patricia', ' Quentin', ' Rachel', ' Samuel', ' Tina', '
    ))

        val = loadvalue
        
        return val
    
    # 报表数据表.部门 <CharField>
    # 
    if mcfieldnamezh == '部门':
        
        # 载入配置成功
        # 给出一些报表数据表表中部门的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    'IT部', '人事部', '财务部', '市场部', '研发部', '生产部', '采购部', '销售部', '客服部', '法务部', ', '行政部', '物流部', '设计部', '策划部', '公关部', '培训部', '技术支持部', '产品部', '质量部', '安全部', '
    ))

        val = loadvalue
        
        return val
    
    # 报表数据表.状态 <CharField>
    # 
    if mcfieldnamezh == '状态':
        
        # 载入配置成功
        # 给出一些报表数据表表中状态的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '待处理', '已处理', '处理中', '已完成', '已取消', '待审核', '审核通过', '审核失败', '待发货', '已发货', '运输中', '已签收', '退货中', '已退货', '退款中', '已退款', '待支付', '已支付', '支付失败', '未知状态', '
    ))

        val = loadvalue
        
        return val
    
    # 报表数据表.报内容 <TextField>
    # 
    if mcfieldnamezh == '报内容':
        
        # 给出一些报表数据表表中报内容的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = ''
        val = loadvalue
        
        return val
    
    # 报表数据表.附件路径 <FileField>
    # 
    if mcfieldnamezh == '附件路径':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    # 报表数据表.最后更新时间 <DateTimeField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '最后更新时间':
        
        # 载入配置成功
        # 给出一些报表数据表表中最后更新时间的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '2023-10-23 09:15:30', ' 2023-10-22 14:20:45', ' 2023-10-21 21:35:12', ' 2023-10-20 12:40:09', ', '2023-10-19 17:55:26', ' 2023-10-18 08:10:43', ' 2023-10-17 13:25:58', ' 2023-10-16 18:40:15', ', '2023-10-15 23:55:32', ' 2023-10-14 04:10:49', ' 2023-10-13 09:25:06', ' 2023-10-12 14:40:23', ', '2023-10-11 19:55:40', ' 2023-10-10 00:10:57', ' 2023-10-09 05:25:14', ' 2023-10-08 10:40:31', ', '2023-10-07 15:55:48', ' 2023-10-06 21:10:05', ' 2023-10-05 02:25:22', ' 2023-10-04 07:40:39', '
    ))

        val = loadvalue
        
        return val
    
    # 报表数据表.关联用户ID <SelectField>
    # -----------------------------SKIP---------------------------
    if mcfieldnamezh == '关联用户ID':
        
        # 如果是图片，文件，UUID，URL，不需要生成
        val = faker.url()
        
        return val
    
    
    # 系统管理员
    
    # 系统管理员.管理员姓名 <CharField>
    # 
    if mcfieldnamezh == '管理员姓名':
        
        # 载入配置成功
        # 给出一些系统管理员表中管理员姓名的示例,要求用单引号包起来用逗号结尾放在一行,不少于20个
        loadvalue = faker.random.choice((
    '管理员姓名1', ' 管理员姓名2', ', '管理员姓名示例1', ' 管理员姓名2', '
    ))

        val = loadvalue
        
        return val
    
    
    return val




# 用户表
def generate_users(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='users'
    fields_en = ['`userid`', '`username`', '`useremail`', '`userpkwkwasswkwkword`', '`userrole`', '`createdate`', '`lkwkwastlogkwkwindate`', '`isactive`', '`departmentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 用户ID 根据名称选择合适的函数来生成数据
        userid = get(faker,'用户ID')
        values.append('\''+str(userid)+'\'')
        
        # 用于外键补充
        
        
        
        # 用户名 根据名称选择合适的函数来生成数据
        username = get(faker,'用户名')
        values.append('\''+str(username)+'\'')
        
        # 用于外键补充
        
        
        
        # 用户邮箱 根据名称选择合适的函数来生成数据
        useremail = get(faker,'用户邮箱')
        values.append('\''+str(useremail)+'\'')
        
        # 用于外键补充
        
        
        
        # 用户密码 根据名称选择合适的函数来生成数据
        userpkwkwasswkwkword = get(faker,'用户密码')
        values.append('\''+str(userpkwkwasswkwkword)+'\'')
        
        # 用于外键补充
        
        
        
        # 用户角色 根据名称选择合适的函数来生成数据
        userrole = get(faker,'用户角色')
        values.append('\''+str(userrole)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建日期 根据名称选择合适的函数来生成数据
        createdate = get(faker,'创建日期')
        values.append('\''+str(createdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后登录日期 根据名称选择合适的函数来生成数据
        lkwkwastlogkwkwindate = get(faker,'最后登录日期')
        values.append('\''+str(lkwkwastlogkwkwindate)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否活跃 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否活跃')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        if '部门ID关联字段' not in cache:
            departmentid = get(faker,'部门ID关联字段')
        else:
            departmentid = faker.random.choice(list(cache.get('部门ID关联字段', )))
        
        # 用于外键补充
        
        if '部门ID关联字段' not in cache:
            cache['部门ID关联字段'] = set()
        cache['部门ID关联字段'].add(departmentid)
        values.append('\''+str(departmentid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 角色表
def generate_roles(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='roles'
    fields_en = ['`roleid`', '`rolename`', '`roledescription`', '`createdtime`', '`createdby`', '`updatedtime`', '`updatedby`', '`isactive`', '`departmentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 角色ID 根据名称选择合适的函数来生成数据
        roleid = get(faker,'角色ID')
        values.append('\''+str(roleid)+'\'')
        
        # 用于外键补充
        
        
        
        # 角色名称 根据名称选择合适的函数来生成数据
        rolename = get(faker,'角色名称')
        values.append('\''+str(rolename)+'\'')
        
        # 用于外键补充
        
        
        
        # 角色描述 根据名称选择合适的函数来生成数据
        roledescription = get(faker,'角色描述')
        values.append('\''+str(roledescription)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdtime = get(faker,'创建时间')
        values.append('\''+str(createdtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者ID 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建者ID')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedtime = get(faker,'更新时间')
        values.append('\''+str(updatedtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新者ID 根据名称选择合适的函数来生成数据
        updatedby = get(faker,'更新者ID')
        values.append('\''+str(updatedby)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        if '部门ID关联字段指向部门的ID' not in cache:
            departmentid = get(faker,'部门ID关联字段指向部门的ID')
        else:
            departmentid = faker.random.choice(list(cache.get('部门ID关联字段指向部门的ID', )))
        
        # 用于外键补充
        
        if '部门ID关联字段指向部门的ID' not in cache:
            cache['部门ID关联字段指向部门的ID'] = set()
        cache['部门ID关联字段指向部门的ID'].add(departmentid)
        values.append('\''+str(departmentid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 用户角色关联表
def generate_userrolerelations(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='userrolerelations'
    fields_en = ['`userid`', '`roleid`', '`createtime`', '`updatetime`', '`kwkwisactive`', '`creatkwkworid`', '`lkwkwastmodkwkwifierid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 用户ID 根据名称选择合适的函数来生成数据
        userid = get(faker,'用户ID')
        values.append('\''+str(userid)+'\'')
        
        # 用于外键补充
        
        
        
        # 角色ID 根据名称选择合适的函数来生成数据
        roleid = get(faker,'角色ID')
        values.append('\''+str(roleid)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createtime = get(faker,'创建时间')
        values.append('\''+str(createtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatetime = get(faker,'更新时间')
        values.append('\''+str(updatetime)+'\'')
        
        # 用于外键补充
        
        
        
        if '是否激活用于标记该关联是否有效' not in cache:
            kwkwisactive = get(faker,'是否激活用于标记该关联是否有效')
        else:
            kwkwisactive = faker.random.choice(list(cache.get('是否激活用于标记该关联是否有效', )))
        
        # 用于外键补充
        
        if '是否激活用于标记该关联是否有效' not in cache:
            cache['是否激活用于标记该关联是否有效'] = set()
        cache['是否激活用于标记该关联是否有效'].add(kwkwisactive)
        values.append('\''+str(kwkwisactive)+'\'')
        
        
        
        # 创建者ID 根据名称选择合适的函数来生成数据
        creatkwkworid = get(faker,'创建者ID')
        values.append('\''+str(creatkwkworid)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改者ID 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifierid = get(faker,'最后修改者ID')
        values.append('\''+str(lkwkwastmodkwkwifierid)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 周报模板表
def generate_weeklyrepkwkworttemplates(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='weeklyrepkwkworttemplates'
    fields_en = ['`templateid`', '`templatename`', '`description`', '`creatkwkwor`', '`creationdate`', '`lkwkwastmodkwkwifier`', '`lkwkwastmodkwkwificationdate`', '`isactive`', '`departmentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 模板ID 根据名称选择合适的函数来生成数据
        templateid = get(faker,'模板ID')
        values.append('\''+str(templateid)+'\'')
        
        # 用于外键补充
        
        
        
        # 模板名称 根据名称选择合适的函数来生成数据
        templatename = get(faker,'模板名称')
        values.append('\''+str(templatename)+'\'')
        
        # 用于外键补充
        
        
        
        # 模板描述 根据名称选择合适的函数来生成数据
        description = get(faker,'模板描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者 根据名称选择合适的函数来生成数据
        creatkwkwor = get(faker,'创建者')
        values.append('\''+str(creatkwkwor)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建日期 根据名称选择合适的函数来生成数据
        creationdate = get(faker,'创建日期')
        values.append('\''+str(creationdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改者 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifier = get(faker,'最后修改者')
        values.append('\''+str(lkwkwastmodkwkwifier)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改日期 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwificationdate = get(faker,'最后修改日期')
        values.append('\''+str(lkwkwastmodkwkwificationdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门ID 根据名称选择合适的函数来生成数据
        departmentid = get(faker,'部门ID')
        values.append('\''+str(departmentid)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 周报表
def generate_weeklyrepkwkworts(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='weeklyrepkwkworts'
    fields_en = ['`repkwkwortid`', '`weekstartdate`', '`weekenddate`', '`department`', '`employeename`', '`repkwkwortcontent`', '`status`', '`createdat`', '`updatedat`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报ID 根据名称选择合适的函数来生成数据
        repkwkwortid = get(faker,'报ID')
        values.append('\''+str(repkwkwortid)+'\'')
        
        # 用于外键补充
        
        
        
        # 周开始日期 根据名称选择合适的函数来生成数据
        weekstartdate = get(faker,'周开始日期')
        values.append('\''+str(weekstartdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 周结束日期 根据名称选择合适的函数来生成数据
        weekenddate = get(faker,'周结束日期')
        values.append('\''+str(weekenddate)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门 根据名称选择合适的函数来生成数据
        department = get(faker,'部门')
        values.append('\''+str(department)+'\'')
        
        # 用于外键补充
        
        
        
        # 员工姓名 根据名称选择合适的函数来生成数据
        employeename = get(faker,'员工姓名')
        values.append('\''+str(employeename)+'\'')
        
        # 用于外键补充
        
        
        
        # 报告内容 根据名称选择合适的函数来生成数据
        repkwkwortcontent = get(faker,'报告内容')
        values.append('\''+str(repkwkwortcontent)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态 根据名称选择合适的函数来生成数据
        status = get(faker,'状态')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报告周期表
def generate_repkwkwortperiods(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortperiods'
    fields_en = ['`repkwkwortperiodid`', '`periodname`', '`startdate`', '`enddate`', '`isactive`', '`createdby`', '`creationdate`', '`lkwkwastmodkwkwifiedby`', '`lkwkwastmodkwkwifieddate`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报告周期ID 根据名称选择合适的函数来生成数据
        repkwkwortperiodid = get(faker,'报告周期ID')
        values.append('\''+str(repkwkwortperiodid)+'\'')
        
        # 用于外键补充
        
        
        
        # 周期名称 根据名称选择合适的函数来生成数据
        periodname = get(faker,'周期名称')
        values.append('\''+str(periodname)+'\'')
        
        # 用于外键补充
        
        
        
        # 开始日期 根据名称选择合适的函数来生成数据
        startdate = get(faker,'开始日期')
        values.append('\''+str(startdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 结束日期 根据名称选择合适的函数来生成数据
        enddate = get(faker,'结束日期')
        values.append('\''+str(enddate)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否活跃用于标记当前周期是否还在使用中 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否活跃用于标记当前周期是否还在使用中')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者记录创建该周期的用户 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建者记录创建该周期的用户')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建日期 根据名称选择合适的函数来生成数据
        creationdate = get(faker,'创建日期')
        values.append('\''+str(creationdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改者记录最后修改该周期的用户 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifiedby = get(faker,'最后修改者记录最后修改该周期的用户')
        values.append('\''+str(lkwkwastmodkwkwifiedby)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改日期 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifieddate = get(faker,'最后修改日期')
        values.append('\''+str(lkwkwastmodkwkwifieddate)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报告状态表
def generate_repkwkwortstatuses(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortstatuses'
    fields_en = ['`repkwkwortstatusid`', '`statusname`', '`description`', '`createdat`', '`updatedat`', '`isactive`', '`isdefault`', '`skwkwortorder`', '`repkwkwortid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报告状态ID 根据名称选择合适的函数来生成数据
        repkwkwortstatusid = get(faker,'报告状态ID')
        values.append('\''+str(repkwkwortstatusid)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态名称 根据名称选择合适的函数来生成数据
        statusname = get(faker,'状态名称')
        values.append('\''+str(statusname)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态描述 根据名称选择合适的函数来生成数据
        description = get(faker,'状态描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否为默认状态 根据名称选择合适的函数来生成数据
        isdefault = get(faker,'是否为默认状态')
        values.append('\''+str(isdefault)+'\'')
        
        # 用于外键补充
        
        
        
        # 排序顺序 根据名称选择合适的函数来生成数据
        skwkwortorder = get(faker,'排序顺序')
        values.append('\''+str(skwkwortorder)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联报告ID指向报告的ID' not in cache:
            repkwkwortid = get(faker,'关联报告ID指向报告的ID')
        else:
            repkwkwortid = faker.random.choice(list(cache.get('关联报告ID指向报告的ID', )))
        
        # 用于外键补充
        
        if '关联报告ID指向报告的ID' not in cache:
            cache['关联报告ID指向报告的ID'] = set()
        cache['关联报告ID指向报告的ID'].add(repkwkwortid)
        values.append('\''+str(repkwkwortid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报告类型表
def generate_repkwkworttypes(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkworttypes'
    fields_en = ['`repkwkworttypeid`', '`repkwkworttypename`', '`description`', '`isactive`', '`createddate`', '`createdby`', '`modkwkwifieddate`', '`modkwkwifiedby`', '`parentrepkwkworttypeid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报告类型ID 根据名称选择合适的函数来生成数据
        repkwkworttypeid = get(faker,'报告类型ID')
        values.append('\''+str(repkwkworttypeid)+'\'')
        
        # 用于外键补充
        
        
        
        # 报告类型名称 根据名称选择合适的函数来生成数据
        repkwkworttypename = get(faker,'报告类型名称')
        values.append('\''+str(repkwkworttypename)+'\'')
        
        # 用于外键补充
        
        
        
        # 描述 根据名称选择合适的函数来生成数据
        description = get(faker,'描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活用于控制该报告类型是否可用 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活用于控制该报告类型是否可用')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建日期 根据名称选择合适的函数来生成数据
        createddate = get(faker,'创建日期')
        values.append('\''+str(createddate)+'\'')
        
        # 用于外键补充
        
        
        
        if '创建者ID关联用户' not in cache:
            createdby = get(faker,'创建者ID关联用户')
        else:
            createdby = faker.random.choice(list(cache.get('创建者ID关联用户', )))
        
        # 用于外键补充
        
        if '创建者ID关联用户' not in cache:
            cache['创建者ID关联用户'] = set()
        cache['创建者ID关联用户'].add(createdby)
        values.append('\''+str(createdby)+'\'')
        
        
        
        # 修改日期 根据名称选择合适的函数来生成数据
        modkwkwifieddate = get(faker,'修改日期')
        values.append('\''+str(modkwkwifieddate)+'\'')
        
        # 用于外键补充
        
        
        
        if '修改者ID关联用户' not in cache:
            modkwkwifiedby = get(faker,'修改者ID关联用户')
        else:
            modkwkwifiedby = faker.random.choice(list(cache.get('修改者ID关联用户', )))
        
        # 用于外键补充
        
        if '修改者ID关联用户' not in cache:
            cache['修改者ID关联用户'] = set()
        cache['修改者ID关联用户'].add(modkwkwifiedby)
        values.append('\''+str(modkwkwifiedby)+'\'')
        
        
        
        if '父报告类型ID用于构建报告类型的层级关系关联本的RepkwkwortTypeID' not in cache:
            parentrepkwkworttypeid = get(faker,'父报告类型ID用于构建报告类型的层级关系关联本的RepkwkwortTypeID')
        else:
            parentrepkwkworttypeid = faker.random.choice(list(cache.get('父报告类型ID用于构建报告类型的层级关系关联本的RepkwkwortTypeID', )))
        
        # 用于外键补充
        
        if '父报告类型ID用于构建报告类型的层级关系关联本的RepkwkwortTypeID' not in cache:
            cache['父报告类型ID用于构建报告类型的层级关系关联本的RepkwkwortTypeID'] = set()
        cache['父报告类型ID用于构建报告类型的层级关系关联本的RepkwkwortTypeID'].add(parentrepkwkworttypeid)
        values.append('\''+str(parentrepkwkworttypeid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报告审核表
def generate_repkwkwortaudits(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortaudits'
    fields_en = ['`repkwkwortauditid`', '`repkwkwortid`', '`auditkwkworid`', '`auditdate`', '`auditstatus`', '`auditcomment`', '`approvaldate`', '`approvalby`', '`isapproved`', '`rejectionrekwkwason`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报告审核ID 根据名称选择合适的函数来生成数据
        repkwkwortauditid = get(faker,'报告审核ID')
        values.append('\''+str(repkwkwortauditid)+'\'')
        
        # 用于外键补充
        
        
        
        # 报告ID 根据名称选择合适的函数来生成数据
        repkwkwortid = get(faker,'报告ID')
        values.append('\''+str(repkwkwortid)+'\'')
        
        # 用于外键补充
        
        
        
        # 审核人ID 根据名称选择合适的函数来生成数据
        auditkwkworid = get(faker,'审核人ID')
        values.append('\''+str(auditkwkworid)+'\'')
        
        # 用于外键补充
        
        
        
        # 审核日期 根据名称选择合适的函数来生成数据
        auditdate = get(faker,'审核日期')
        values.append('\''+str(auditdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 审核状态 根据名称选择合适的函数来生成数据
        auditstatus = get(faker,'审核状态')
        values.append('\''+str(auditstatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 审核意见 根据名称选择合适的函数来生成数据
        auditcomment = get(faker,'审核意见')
        values.append('\''+str(auditcomment)+'\'')
        
        # 用于外键补充
        
        
        
        # 批准日期 根据名称选择合适的函数来生成数据
        approvaldate = get(faker,'批准日期')
        values.append('\''+str(approvaldate)+'\'')
        
        # 用于外键补充
        
        
        
        # 批准人 根据名称选择合适的函数来生成数据
        approvalby = get(faker,'批准人')
        values.append('\''+str(approvalby)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否已批准 根据名称选择合适的函数来生成数据
        isapproved = get(faker,'是否已批准')
        values.append('\''+str(isapproved)+'\'')
        
        # 用于外键补充
        
        
        
        # 拒绝理由 根据名称选择合适的函数来生成数据
        rejectionrekwkwason = get(faker,'拒绝理由')
        values.append('\''+str(rejectionrekwkwason)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 审核意见表
def generate_auditcomments(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='auditcomments'
    fields_en = ['`id`', '`commentcontent`', '`creatkwkworid`', '`creationtime`', '`lkwkwastmodkwkwifierid`', '`lkwkwastmodkwkwificationtime`', '`status`', '`targetid`', '`targettype`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 审核意见内容 根据名称选择合适的函数来生成数据
        commentcontent = get(faker,'审核意见内容')
        values.append('\''+str(commentcontent)+'\'')
        
        # 用于外键补充
        
        
        
        if '创建者ID关联用户' not in cache:
            creatkwkworid = get(faker,'创建者ID关联用户')
        else:
            creatkwkworid = faker.random.choice(list(cache.get('创建者ID关联用户', )))
        
        # 用于外键补充
        
        if '创建者ID关联用户' not in cache:
            cache['创建者ID关联用户'] = set()
        cache['创建者ID关联用户'].add(creatkwkworid)
        values.append('\''+str(creatkwkworid)+'\'')
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        creationtime = get(faker,'创建时间')
        values.append('\''+str(creationtime)+'\'')
        
        # 用于外键补充
        
        
        
        if '最后修改者ID关联用户' not in cache:
            lkwkwastmodkwkwifierid = get(faker,'最后修改者ID关联用户')
        else:
            lkwkwastmodkwkwifierid = faker.random.choice(list(cache.get('最后修改者ID关联用户', )))
        
        # 用于外键补充
        
        if '最后修改者ID关联用户' not in cache:
            cache['最后修改者ID关联用户'] = set()
        cache['最后修改者ID关联用户'].add(lkwkwastmodkwkwifierid)
        values.append('\''+str(lkwkwastmodkwkwifierid)+'\'')
        
        
        
        # 最后修改时间 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwificationtime = get(faker,'最后修改时间')
        values.append('\''+str(lkwkwastmodkwkwificationtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 审核状态例如待审核、已通过、未通过 根据名称选择合适的函数来生成数据
        status = get(faker,'审核状态例如待审核、已通过、未通过')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        if '目标ID关联被审核对象的ID如周报ID' not in cache:
            targetid = get(faker,'目标ID关联被审核对象的ID如周报ID')
        else:
            targetid = faker.random.choice(list(cache.get('目标ID关联被审核对象的ID如周报ID', )))
        
        # 用于外键补充
        
        if '目标ID关联被审核对象的ID如周报ID' not in cache:
            cache['目标ID关联被审核对象的ID如周报ID'] = set()
        cache['目标ID关联被审核对象的ID如周报ID'].add(targetid)
        values.append('\''+str(targetid)+'\'')
        
        
        
        # 目标类型例如周报、项目报告等 根据名称选择合适的函数来生成数据
        targettype = get(faker,'目标类型例如周报、项目报告等')
        values.append('\''+str(targettype)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 部门表
def generate_departments(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='departments'
    fields_en = ['`departmentid`', '`departmentname`', '`parentdepartmentid`', '`departmentcode`', '`description`', '`createdate`', '`createdby`', '`lkwkwastmodkwkwifieddate`', '`lkwkwastmodkwkwifiedby`', '`isactive`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 部门ID 根据名称选择合适的函数来生成数据
        departmentid = get(faker,'部门ID')
        values.append('\''+str(departmentid)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门名称 根据名称选择合适的函数来生成数据
        departmentname = get(faker,'部门名称')
        values.append('\''+str(departmentname)+'\'')
        
        # 用于外键补充
        
        
        
        # 上级部门ID 根据名称选择合适的函数来生成数据
        parentdepartmentid = get(faker,'上级部门ID')
        values.append('\''+str(parentdepartmentid)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门编码 根据名称选择合适的函数来生成数据
        departmentcode = get(faker,'部门编码')
        values.append('\''+str(departmentcode)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门描述 根据名称选择合适的函数来生成数据
        description = get(faker,'部门描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建日期 根据名称选择合适的函数来生成数据
        createdate = get(faker,'创建日期')
        values.append('\''+str(createdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建人 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建人')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改日期 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifieddate = get(faker,'最后修改日期')
        values.append('\''+str(lkwkwastmodkwkwifieddate)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后修改人 根据名称选择合适的函数来生成数据
        lkwkwastmodkwkwifiedby = get(faker,'最后修改人')
        values.append('\''+str(lkwkwastmodkwkwifiedby)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否活跃 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否活跃')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 员工表
def generate_employees(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='employees'
    fields_en = ['`employeeid`', '`employeename`', '`departmentid`', '`position`', '`email`', '`phonenumber`', '`startdate`', '`salary`', '`managerid`', '`isactive`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 员工ID 根据名称选择合适的函数来生成数据
        employeeid = get(faker,'员工ID')
        values.append('\''+str(employeeid)+'\'')
        
        # 用于外键补充
        
        
        
        # 员工姓名 根据名称选择合适的函数来生成数据
        employeename = get(faker,'员工姓名')
        values.append('\''+str(employeename)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门ID 根据名称选择合适的函数来生成数据
        departmentid = get(faker,'部门ID')
        values.append('\''+str(departmentid)+'\'')
        
        # 用于外键补充
        
        
        
        # 职位 根据名称选择合适的函数来生成数据
        position = get(faker,'职位')
        values.append('\''+str(position)+'\'')
        
        # 用于外键补充
        
        
        
        # 电子邮件 根据名称选择合适的函数来生成数据
        email = get(faker,'电子邮件')
        values.append('\''+str(email)+'\'')
        
        # 用于外键补充
        
        
        
        # 电话号码 根据名称选择合适的函数来生成数据
        phonenumber = get(faker,'电话号码')
        values.append('\''+str(phonenumber)+'\'')
        
        # 用于外键补充
        
        
        
        # 入职日期 根据名称选择合适的函数来生成数据
        startdate = get(faker,'入职日期')
        values.append('\''+str(startdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 薪资 根据名称选择合适的函数来生成数据
        salary = get(faker,'薪资')
        values.append('\''+str(salary)+'\'')
        
        # 用于外键补充
        
        
        
        # 上级员工ID 根据名称选择合适的函数来生成数据
        managerid = get(faker,'上级员工ID')
        values.append('\''+str(managerid)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否在职 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否在职')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 员工周报关联表
def generate_employeeweeklyrepkwkwortrelations(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='employeeweeklyrepkwkwortrelations'
    fields_en = ['`id`', '`employeeid`', '`repkwkwortid`', '`weekstartdate`', '`weekenddate`', '`status`', '`submittime`', '`reviewerid`', '`reviewtime`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        if '关联ID' not in cache:
            cache['关联ID'] = set()
        cache['关联ID'].add(id)
        values.append('\''+str(id)+'\'')
        
        
        
        # 员工ID 根据名称选择合适的函数来生成数据
        employeeid = get(faker,'员工ID')
        values.append('\''+str(employeeid)+'\'')
        
        # 用于外键补充
        
        
        
        # 周报ID 根据名称选择合适的函数来生成数据
        repkwkwortid = get(faker,'周报ID')
        values.append('\''+str(repkwkwortid)+'\'')
        
        # 用于外键补充
        
        
        
        # 周报开始日期 根据名称选择合适的函数来生成数据
        weekstartdate = get(faker,'周报开始日期')
        values.append('\''+str(weekstartdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 周报结束日期 根据名称选择合适的函数来生成数据
        weekenddate = get(faker,'周报结束日期')
        values.append('\''+str(weekenddate)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态如已提交、待审核、已审核等 根据名称选择合适的函数来生成数据
        status = get(faker,'状态如已提交、待审核、已审核等')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 提交时间 根据名称选择合适的函数来生成数据
        submittime = get(faker,'提交时间')
        values.append('\''+str(submittime)+'\'')
        
        # 用于外键补充
        
        
        
        # 审核人ID 根据名称选择合适的函数来生成数据
        reviewerid = get(faker,'审核人ID')
        values.append('\''+str(reviewerid)+'\'')
        
        # 用于外键补充
        
        
        
        # 审核时间 根据名称选择合适的函数来生成数据
        reviewtime = get(faker,'审核时间')
        values.append('\''+str(reviewtime)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 通知表
def generate_notkwkwifications(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='notkwkwifications'
    fields_en = ['`id`', '`title`', '`content`', '`senderid`', '`receiverid`', '`sendtime`', '`readstatus`', '`prikwkwority`', '`kwkwiskwkwdeleted`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 通知标题 根据名称选择合适的函数来生成数据
        title = get(faker,'通知标题')
        values.append('\''+str(title)+'\'')
        
        # 用于外键补充
        
        
        
        # 通知内容 根据名称选择合适的函数来生成数据
        content = get(faker,'通知内容')
        values.append('\''+str(content)+'\'')
        
        # 用于外键补充
        
        
        
        # 发送者ID 根据名称选择合适的函数来生成数据
        senderid = get(faker,'发送者ID')
        values.append('\''+str(senderid)+'\'')
        
        # 用于外键补充
        
        
        
        # 接收者ID 根据名称选择合适的函数来生成数据
        receiverid = get(faker,'接收者ID')
        values.append('\''+str(receiverid)+'\'')
        
        # 用于外键补充
        
        
        
        # 发送时间 根据名称选择合适的函数来生成数据
        sendtime = get(faker,'发送时间')
        values.append('\''+str(sendtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 阅读状态 根据名称选择合适的函数来生成数据
        readstatus = get(faker,'阅读状态')
        values.append('\''+str(readstatus)+'\'')
        
        # 用于外键补充
        
        
        
        # 优先级 根据名称选择合适的函数来生成数据
        prikwkwority = get(faker,'优先级')
        values.append('\''+str(prikwkwority)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否删除 根据名称选择合适的函数来生成数据
        kwkwiskwkwdeleted = get(faker,'是否删除')
        values.append('\''+str(kwkwiskwkwdeleted)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 通知类型表
def generate_notkwkwificationtypes(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='notkwkwificationtypes'
    fields_en = ['`notkwkwificationtypeid`', '`notkwkwificationtypename`', '`description`', '`isactive`', '`createddate`', '`createdby`', '`modkwkwifieddate`', '`modkwkwifiedby`', '`parentnotkwkwificationtypeid`', '`skwkwortorder`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 通知类型ID 根据名称选择合适的函数来生成数据
        notkwkwificationtypeid = get(faker,'通知类型ID')
        values.append('\''+str(notkwkwificationtypeid)+'\'')
        
        # 用于外键补充
        
        
        
        # 通知类型名称 根据名称选择合适的函数来生成数据
        notkwkwificationtypename = get(faker,'通知类型名称')
        values.append('\''+str(notkwkwificationtypename)+'\'')
        
        # 用于外键补充
        
        
        
        # 描述 根据名称选择合适的函数来生成数据
        description = get(faker,'描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建日期 根据名称选择合适的函数来生成数据
        createddate = get(faker,'创建日期')
        values.append('\''+str(createddate)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建者')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 修改日期 根据名称选择合适的函数来生成数据
        modkwkwifieddate = get(faker,'修改日期')
        values.append('\''+str(modkwkwifieddate)+'\'')
        
        # 用于外键补充
        
        
        
        # 修改者 根据名称选择合适的函数来生成数据
        modkwkwifiedby = get(faker,'修改者')
        values.append('\''+str(modkwkwifiedby)+'\'')
        
        # 用于外键补充
        
        
        
        # 父通知类型ID 根据名称选择合适的函数来生成数据
        parentnotkwkwificationtypeid = get(faker,'父通知类型ID')
        values.append('\''+str(parentnotkwkwificationtypeid)+'\'')
        
        # 用于外键补充
        
        
        
        # 排序顺序 根据名称选择合适的函数来生成数据
        skwkwortorder = get(faker,'排序顺序')
        values.append('\''+str(skwkwortorder)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 邮件发送记录表
def generate_emaillogs(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='emaillogs'
    fields_en = ['`id`', '`emailaddress`', '`subject`', '`content`', '`sendtime`', '`status`', '`recipientcount`', '`senderid`', '`attachmentcount`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 电子邮件地址 根据名称选择合适的函数来生成数据
        emailaddress = get(faker,'电子邮件地址')
        values.append('\''+str(emailaddress)+'\'')
        
        # 用于外键补充
        
        
        
        # 邮件主题 根据名称选择合适的函数来生成数据
        subject = get(faker,'邮件主题')
        values.append('\''+str(subject)+'\'')
        
        # 用于外键补充
        
        
        
        # 邮件内容 根据名称选择合适的函数来生成数据
        content = get(faker,'邮件内容')
        values.append('\''+str(content)+'\'')
        
        # 用于外键补充
        
        
        
        # 发送时间 根据名称选择合适的函数来生成数据
        sendtime = get(faker,'发送时间')
        values.append('\''+str(sendtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 发送状态如成功、失败、待发送 根据名称选择合适的函数来生成数据
        status = get(faker,'发送状态如成功、失败、待发送')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 收件人数量 根据名称选择合适的函数来生成数据
        recipientcount = get(faker,'收件人数量')
        values.append('\''+str(recipientcount)+'\'')
        
        # 用于外键补充
        
        
        
        if '发送者ID关联用户' not in cache:
            senderid = get(faker,'发送者ID关联用户')
        else:
            senderid = faker.random.choice(list(cache.get('发送者ID关联用户', )))
        
        # 用于外键补充
        
        if '发送者ID关联用户' not in cache:
            cache['发送者ID关联用户'] = set()
        cache['发送者ID关联用户'].add(senderid)
        values.append('\''+str(senderid)+'\'')
        
        
        
        # 附件数量 根据名称选择合适的函数来生成数据
        attachmentcount = get(faker,'附件数量')
        values.append('\''+str(attachmentcount)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 短信发送记录表
def generate_smslogs(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='smslogs'
    fields_en = ['`id`', '`smscontent`', '`receivernumber`', '`sendernumber`', '`sendtime`', '`status`', '`rekwkwtrycount`', '`errkwkwormessage`', '`kwkwisread`', '`relatedtkwkwaskid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 短信内容 根据名称选择合适的函数来生成数据
        smscontent = get(faker,'短信内容')
        values.append('\''+str(smscontent)+'\'')
        
        # 用于外键补充
        
        
        
        # 接收者号码 根据名称选择合适的函数来生成数据
        receivernumber = get(faker,'接收者号码')
        values.append('\''+str(receivernumber)+'\'')
        
        # 用于外键补充
        
        
        
        # 发送者号码 根据名称选择合适的函数来生成数据
        sendernumber = get(faker,'发送者号码')
        values.append('\''+str(sendernumber)+'\'')
        
        # 用于外键补充
        
        
        
        # 发送时间 根据名称选择合适的函数来生成数据
        sendtime = get(faker,'发送时间')
        values.append('\''+str(sendtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 发送状态如成功、失败、待发送 根据名称选择合适的函数来生成数据
        status = get(faker,'发送状态如成功、失败、待发送')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 重试次数 根据名称选择合适的函数来生成数据
        rekwkwtrycount = get(faker,'重试次数')
        values.append('\''+str(rekwkwtrycount)+'\'')
        
        # 用于外键补充
        
        
        
        # 错误信息如果发送失败 根据名称选择合适的函数来生成数据
        errkwkwormessage = get(faker,'错误信息如果发送失败')
        values.append('\''+str(errkwkwormessage)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否已读标记接收者是否已查看短信 根据名称选择合适的函数来生成数据
        kwkwisread = get(faker,'是否已读标记接收者是否已查看短信')
        values.append('\''+str(kwkwisread)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联任务ID如果短信发送与某个特定任务相关' not in cache:
            relatedtkwkwaskid = get(faker,'关联任务ID如果短信发送与某个特定任务相关')
        else:
            relatedtkwkwaskid = faker.random.choice(list(cache.get('关联任务ID如果短信发送与某个特定任务相关', )))
        
        # 用于外键补充
        
        if '关联任务ID如果短信发送与某个特定任务相关' not in cache:
            cache['关联任务ID如果短信发送与某个特定任务相关'] = set()
        cache['关联任务ID如果短信发送与某个特定任务相关'].add(relatedtkwkwaskid)
        values.append('\''+str(relatedtkwkwaskid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 附件表
def generate_attachments(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='attachments'
    fields_en = ['`id`', '`filename`', '`filepath`', '`filesize`', '`filetype`', '`uploadtime`', '`creatkwkworid`', '`creatkwkworname`', '`relatedrepkwkwortid`', '`description`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 文件名 根据名称选择合适的函数来生成数据
        filename = get(faker,'文件名')
        values.append('\''+str(filename)+'\'')
        
        # 用于外键补充
        
        
        
        # 文件存储路径 根据名称选择合适的函数来生成数据
        filepath = get(faker,'文件存储路径')
        values.append('\''+str(filepath)+'\'')
        
        # 用于外键补充
        
        
        
        # 文件大小 根据名称选择合适的函数来生成数据
        filesize = get(faker,'文件大小')
        values.append('\''+str(filesize)+'\'')
        
        # 用于外键补充
        
        
        
        # 文件类型 根据名称选择合适的函数来生成数据
        filetype = get(faker,'文件类型')
        values.append('\''+str(filetype)+'\'')
        
        # 用于外键补充
        
        
        
        # 上传时间 根据名称选择合适的函数来生成数据
        uploadtime = get(faker,'上传时间')
        values.append('\''+str(uploadtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者ID 根据名称选择合适的函数来生成数据
        creatkwkworid = get(faker,'创建者ID')
        values.append('\''+str(creatkwkworid)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者姓名 根据名称选择合适的函数来生成数据
        creatkwkworname = get(faker,'创建者姓名')
        values.append('\''+str(creatkwkworname)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联周报ID' not in cache:
            relatedrepkwkwortid = get(faker,'关联周报ID')
        else:
            relatedrepkwkwortid = faker.random.choice(list(cache.get('关联周报ID', )))
        
        # 用于外键补充
        
        if '关联周报ID' not in cache:
            cache['关联周报ID'] = set()
        cache['关联周报ID'].add(relatedrepkwkwortid)
        values.append('\''+str(relatedrepkwkwortid)+'\'')
        
        
        
        # 描述 根据名称选择合适的函数来生成数据
        description = get(faker,'描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 附件类型表
def generate_attachmenttypes(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='attachmenttypes'
    fields_en = ['`attachmenttypeid`', '`attachmenttypename`', '`description`', '`fileextension`', '`maxfilesize`', '`createdat`', '`updatedat`', '`isactive`', '`createdby`', '`updatedby`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 附件类型ID 根据名称选择合适的函数来生成数据
        attachmenttypeid = get(faker,'附件类型ID')
        values.append('\''+str(attachmenttypeid)+'\'')
        
        # 用于外键补充
        
        
        
        # 附件类型名称 根据名称选择合适的函数来生成数据
        attachmenttypename = get(faker,'附件类型名称')
        values.append('\''+str(attachmenttypename)+'\'')
        
        # 用于外键补充
        
        
        
        # 描述 根据名称选择合适的函数来生成数据
        description = get(faker,'描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 文件扩展名 根据名称选择合适的函数来生成数据
        fileextension = get(faker,'文件扩展名')
        values.append('\''+str(fileextension)+'\'')
        
        # 用于外键补充
        
        
        
        # 最大文件大小单位MB 根据名称选择合适的函数来生成数据
        maxfilesize = get(faker,'最大文件大小单位MB')
        values.append('\''+str(maxfilesize)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者ID 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建者ID')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新者ID 根据名称选择合适的函数来生成数据
        updatedby = get(faker,'更新者ID')
        values.append('\''+str(updatedby)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报告提交历史表
def generate_repkwkwortsubmkwkwissionhkwkwistkwkwories(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortsubmkwkwissionhkwkwistkwkwories'
    fields_en = ['`repkwkwortid`', '`submkwkwissiondate`', '`employeeid`', '`repkwkworttitle`', '`description`', '`status`', '`approvaldate`', '`approverid`', '`departmentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报告ID 根据名称选择合适的函数来生成数据
        repkwkwortid = get(faker,'报告ID')
        values.append('\''+str(repkwkwortid)+'\'')
        
        # 用于外键补充
        
        
        
        # 提交日期 根据名称选择合适的函数来生成数据
        submkwkwissiondate = get(faker,'提交日期')
        values.append('\''+str(submkwkwissiondate)+'\'')
        
        # 用于外键补充
        
        
        
        # 员工ID 根据名称选择合适的函数来生成数据
        employeeid = get(faker,'员工ID')
        values.append('\''+str(employeeid)+'\'')
        
        # 用于外键补充
        
        
        
        # 报告标题 根据名称选择合适的函数来生成数据
        repkwkworttitle = get(faker,'报告标题')
        values.append('\''+str(repkwkworttitle)+'\'')
        
        # 用于外键补充
        
        
        
        # 报告描述 根据名称选择合适的函数来生成数据
        description = get(faker,'报告描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态 根据名称选择合适的函数来生成数据
        status = get(faker,'状态')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 审批日期 根据名称选择合适的函数来生成数据
        approvaldate = get(faker,'审批日期')
        values.append('\''+str(approvaldate)+'\'')
        
        # 用于外键补充
        
        
        
        # 审批人ID 根据名称选择合适的函数来生成数据
        approverid = get(faker,'审批人ID')
        values.append('\''+str(approverid)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门ID 根据名称选择合适的函数来生成数据
        departmentid = get(faker,'部门ID')
        values.append('\''+str(departmentid)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报告修改历史表
def generate_repkwkwortmodkwkwificationhkwkwistkwkwories(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortmodkwkwificationhkwkwistkwkwories'
    fields_en = ['`id`', '`repkwkwortid`', '`modkwkwificationtime`', '`modkwkwifierid`', '`previouscontent`', '`modkwkwifiedcontent`', '`modkwkwificationtype`', '`comment`', '`kwkwislatest`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        if '关联的报告ID' not in cache:
            repkwkwortid = get(faker,'关联的报告ID')
        else:
            repkwkwortid = faker.random.choice(list(cache.get('关联的报告ID', )))
        
        # 用于外键补充
        
        if '关联的报告ID' not in cache:
            cache['关联的报告ID'] = set()
        cache['关联的报告ID'].add(repkwkwortid)
        values.append('\''+str(repkwkwortid)+'\'')
        
        
        
        # 修改时间 根据名称选择合适的函数来生成数据
        modkwkwificationtime = get(faker,'修改时间')
        values.append('\''+str(modkwkwificationtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 修改者ID 根据名称选择合适的函数来生成数据
        modkwkwifierid = get(faker,'修改者ID')
        values.append('\''+str(modkwkwifierid)+'\'')
        
        # 用于外键补充
        
        
        
        # 修改前的内容摘要 根据名称选择合适的函数来生成数据
        previouscontent = get(faker,'修改前的内容摘要')
        values.append('\''+str(previouscontent)+'\'')
        
        # 用于外键补充
        
        
        
        # 修改后的内容摘要 根据名称选择合适的函数来生成数据
        modkwkwifiedcontent = get(faker,'修改后的内容摘要')
        values.append('\''+str(modkwkwifiedcontent)+'\'')
        
        # 用于外键补充
        
        
        
        # 修改类型如内容更新、状态变更等 根据名称选择合适的函数来生成数据
        modkwkwificationtype = get(faker,'修改类型如内容更新、状态变更等')
        values.append('\''+str(modkwkwificationtype)+'\'')
        
        # 用于外键补充
        
        
        
        # 修改备注 根据名称选择合适的函数来生成数据
        comment = get(faker,'修改备注')
        values.append('\''+str(comment)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否为最新修改用于快速检索最新记录 根据名称选择合适的函数来生成数据
        kwkwislatest = get(faker,'是否为最新修改用于快速检索最新记录')
        values.append('\''+str(kwkwislatest)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报告评论表
def generate_repkwkwortcomments(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortcomments'
    fields_en = ['`id`', '`repkwkwortid`', '`userid`', '`content`', '`createdat`', '`updatedat`', '`kwkwiskwkwdeleted`', '`ratkwkwing`', '`status`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        if '报告ID关联字段指向报告的ID' not in cache:
            repkwkwortid = get(faker,'报告ID关联字段指向报告的ID')
        else:
            repkwkwortid = faker.random.choice(list(cache.get('报告ID关联字段指向报告的ID', )))
        
        # 用于外键补充
        
        if '报告ID关联字段指向报告的ID' not in cache:
            cache['报告ID关联字段指向报告的ID'] = set()
        cache['报告ID关联字段指向报告的ID'].add(repkwkwortid)
        values.append('\''+str(repkwkwortid)+'\'')
        
        
        
        if '用户ID关联字段指向用户的ID' not in cache:
            userid = get(faker,'用户ID关联字段指向用户的ID')
        else:
            userid = faker.random.choice(list(cache.get('用户ID关联字段指向用户的ID', )))
        
        # 用于外键补充
        
        if '用户ID关联字段指向用户的ID' not in cache:
            cache['用户ID关联字段指向用户的ID'] = set()
        cache['用户ID关联字段指向用户的ID'].add(userid)
        values.append('\''+str(userid)+'\'')
        
        
        
        # 评论内容 根据名称选择合适的函数来生成数据
        content = get(faker,'评论内容')
        values.append('\''+str(content)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否删除逻辑删除标记 根据名称选择合适的函数来生成数据
        kwkwiskwkwdeleted = get(faker,'是否删除逻辑删除标记')
        values.append('\''+str(kwkwiskwkwdeleted)+'\'')
        
        # 用于外键补充
        
        
        
        # 评分可选用于示用户对报告的评分 根据名称选择合适的函数来生成数据
        ratkwkwing = get(faker,'评分可选用于示用户对报告的评分')
        values.append('\''+str(ratkwkwing)+'\'')
        
        # 用于外键补充
        
        
        
        # 评论状态如待审核、已审核、隐藏等 根据名称选择合适的函数来生成数据
        status = get(faker,'评论状态如待审核、已审核、隐藏等')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 评论回复表
def generate_commentreplies(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='commentreplies'
    fields_en = ['`id`', '`commentid`', '`userid`', '`content`', '`createdat`', '`updatedat`', '`kwkwiskwkwdeleted`', '`likecount`', '`replytoid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        if '评论ID关联字段指向评论的ID' not in cache:
            commentid = get(faker,'评论ID关联字段指向评论的ID')
        else:
            commentid = faker.random.choice(list(cache.get('评论ID关联字段指向评论的ID', )))
        
        # 用于外键补充
        
        if '评论ID关联字段指向评论的ID' not in cache:
            cache['评论ID关联字段指向评论的ID'] = set()
        cache['评论ID关联字段指向评论的ID'].add(commentid)
        values.append('\''+str(commentid)+'\'')
        
        
        
        if '用户ID关联字段指向用户的ID' not in cache:
            userid = get(faker,'用户ID关联字段指向用户的ID')
        else:
            userid = faker.random.choice(list(cache.get('用户ID关联字段指向用户的ID', )))
        
        # 用于外键补充
        
        if '用户ID关联字段指向用户的ID' not in cache:
            cache['用户ID关联字段指向用户的ID'] = set()
        cache['用户ID关联字段指向用户的ID'].add(userid)
        values.append('\''+str(userid)+'\'')
        
        
        
        # 回复内容 根据名称选择合适的函数来生成数据
        content = get(faker,'回复内容')
        values.append('\''+str(content)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否删除逻辑删除标记 根据名称选择合适的函数来生成数据
        kwkwiskwkwdeleted = get(faker,'是否删除逻辑删除标记')
        values.append('\''+str(kwkwiskwkwdeleted)+'\'')
        
        # 用于外键补充
        
        
        
        # 点赞数 根据名称选择合适的函数来生成数据
        likecount = get(faker,'点赞数')
        values.append('\''+str(likecount)+'\'')
        
        # 用于外键补充
        
        
        
        if '回复的回复ID用于构建回复链关联字段指向本的ID' not in cache:
            replytoid = get(faker,'回复的回复ID用于构建回复链关联字段指向本的ID')
        else:
            replytoid = faker.random.choice(list(cache.get('回复的回复ID用于构建回复链关联字段指向本的ID', )))
        
        # 用于外键补充
        
        if '回复的回复ID用于构建回复链关联字段指向本的ID' not in cache:
            cache['回复的回复ID用于构建回复链关联字段指向本的ID'] = set()
        cache['回复的回复ID用于构建回复链关联字段指向本的ID'].add(replytoid)
        values.append('\''+str(replytoid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报告评分表
def generate_repkwkwortratkwkwings(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortratkwkwings'
    fields_en = ['`repkwkwortid`', '`ratkwkwing`', '`raterid`', '`repkwkwortdate`', '`ratkwkwingdate`', '`comment`', '`kwkwisapproved`', '`categkwkworyid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报告ID唯一标识一个报告 根据名称选择合适的函数来生成数据
        repkwkwortid = get(faker,'报告ID唯一标识一个报告')
        values.append('\''+str(repkwkwortid)+'\'')
        
        # 用于外键补充
        
        
        
        # 评分示对报告的评分可以是数值类型 根据名称选择合适的函数来生成数据
        ratkwkwing = get(faker,'评分示对报告的评分可以是数值类型')
        values.append('\''+str(ratkwkwing)+'\'')
        
        # 用于外键补充
        
        
        
        # 评分者ID示哪个用户或系统对报告进行了评分 根据名称选择合适的函数来生成数据
        raterid = get(faker,'评分者ID示哪个用户或系统对报告进行了评分')
        values.append('\''+str(raterid)+'\'')
        
        # 用于外键补充
        
        
        
        # 报告日期报告提交的日期 根据名称选择合适的函数来生成数据
        repkwkwortdate = get(faker,'报告日期报告提交的日期')
        values.append('\''+str(repkwkwortdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 评分日期对报告进行评分的日期 根据名称选择合适的函数来生成数据
        ratkwkwingdate = get(faker,'评分日期对报告进行评分的日期')
        values.append('\''+str(ratkwkwingdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 评语对报告的额外评语或反馈 根据名称选择合适的函数来生成数据
        comment = get(faker,'评语对报告的额外评语或反馈')
        values.append('\''+str(comment)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否通过示报告是否通过审核 根据名称选择合适的函数来生成数据
        kwkwisapproved = get(faker,'是否通过示报告是否通过审核')
        values.append('\''+str(kwkwisapproved)+'\'')
        
        # 用于外键补充
        
        
        
        if '类别ID关联字段示报告所属的类别' not in cache:
            categkwkworyid = get(faker,'类别ID关联字段示报告所属的类别')
        else:
            categkwkworyid = faker.random.choice(list(cache.get('类别ID关联字段示报告所属的类别', )))
        
        # 用于外键补充
        
        if '类别ID关联字段示报告所属的类别' not in cache:
            cache['类别ID关联字段示报告所属的类别'] = set()
        cache['类别ID关联字段示报告所属的类别'].add(categkwkworyid)
        values.append('\''+str(categkwkworyid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 评分标准表
def generate_ratkwkwingcriteria(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='ratkwkwingcriteria'
    fields_en = ['`id`', '`criterianame`', '`description`', '`categkwkwory`', '`weight`', '`kwkwisactive`', '`createdat`', '`updatedat`', '`relateditemid`', '`relateditemtype`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 评分标准名称 根据名称选择合适的函数来生成数据
        criterianame = get(faker,'评分标准名称')
        values.append('\''+str(criterianame)+'\'')
        
        # 用于外键补充
        
        
        
        # 描述 根据名称选择合适的函数来生成数据
        description = get(faker,'描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 类别 根据名称选择合适的函数来生成数据
        categkwkwory = get(faker,'类别')
        values.append('\''+str(categkwkwory)+'\'')
        
        # 用于外键补充
        
        
        
        # 权重 根据名称选择合适的函数来生成数据
        weight = get(faker,'权重')
        values.append('\''+str(weight)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        kwkwisactive = get(faker,'是否激活')
        values.append('\''+str(kwkwisactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联项目ID' not in cache:
            relateditemid = get(faker,'关联项目ID')
        else:
            relateditemid = faker.random.choice(list(cache.get('关联项目ID', )))
        
        # 用于外键补充
        
        if '关联项目ID' not in cache:
            cache['关联项目ID'] = set()
        cache['关联项目ID'].add(relateditemid)
        values.append('\''+str(relateditemid)+'\'')
        
        
        
        if '关联项目类型' not in cache:
            relateditemtype = get(faker,'关联项目类型')
        else:
            relateditemtype = faker.random.choice(list(cache.get('关联项目类型', )))
        
        # 用于外键补充
        
        if '关联项目类型' not in cache:
            cache['关联项目类型'] = set()
        cache['关联项目类型'].add(relateditemtype)
        values.append('\''+str(relateditemtype)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 权限表
def generate_permkwkwissions(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='permkwkwissions'
    fields_en = ['`id`', '`name`', '`description`', '`createdat`', '`updatedat`', '`kwkwisactive`', '`parentid`', '`roleid`', '`systemmodule`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 权限名称 根据名称选择合适的函数来生成数据
        name = get(faker,'权限名称')
        values.append('\''+str(name)+'\'')
        
        # 用于外键补充
        
        
        
        # 权限描述 根据名称选择合适的函数来生成数据
        description = get(faker,'权限描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活用于控制权限是否可用 根据名称选择合适的函数来生成数据
        kwkwisactive = get(faker,'是否激活用于控制权限是否可用')
        values.append('\''+str(kwkwisactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 父权限ID用于构建权限层级关系 根据名称选择合适的函数来生成数据
        parentid = get(faker,'父权限ID用于构建权限层级关系')
        values.append('\''+str(parentid)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联角色ID示该权限属于哪个角色' not in cache:
            roleid = get(faker,'关联角色ID示该权限属于哪个角色')
        else:
            roleid = faker.random.choice(list(cache.get('关联角色ID示该权限属于哪个角色', )))
        
        # 用于外键补充
        
        if '关联角色ID示该权限属于哪个角色' not in cache:
            cache['关联角色ID示该权限属于哪个角色'] = set()
        cache['关联角色ID示该权限属于哪个角色'].add(roleid)
        values.append('\''+str(roleid)+'\'')
        
        
        
        # 所属系统模块标识权限属于哪个系统模块或功能区域 根据名称选择合适的函数来生成数据
        systemmodule = get(faker,'所属系统模块标识权限属于哪个系统模块或功能区域')
        values.append('\''+str(systemmodule)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 权限角色关联表
def generate_permkwkwissionrolerelations(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='permkwkwissionrolerelations'
    fields_en = ['`permkwkwissionid`', '`roleid`', '`createdat`', '`updatedat`', '`creatkwkworid`', '`kwkwisactive`', '`description`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 权限ID 根据名称选择合适的函数来生成数据
        permkwkwissionid = get(faker,'权限ID')
        values.append('\''+str(permkwkwissionid)+'\'')
        
        # 用于外键补充
        
        
        
        # 角色ID 根据名称选择合适的函数来生成数据
        roleid = get(faker,'角色ID')
        values.append('\''+str(roleid)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者ID 根据名称选择合适的函数来生成数据
        creatkwkworid = get(faker,'创建者ID')
        values.append('\''+str(creatkwkworid)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活用于控制权限是否有效 根据名称选择合适的函数来生成数据
        kwkwisactive = get(faker,'是否激活用于控制权限是否有效')
        values.append('\''+str(kwkwisactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 描述信息 根据名称选择合适的函数来生成数据
        description = get(faker,'描述信息')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 系统日志表
def generate_systemlogs(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='systemlogs'
    fields_en = ['`logid`', '`logtime`', '`userid`', '`action`', '`modulename`', '`description`', '`result`', '`ipaddressip`', '`relatedid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 日志ID 根据名称选择合适的函数来生成数据
        logid = get(faker,'日志ID')
        values.append('\''+str(logid)+'\'')
        
        # 用于外键补充
        
        
        
        # 日志时间 根据名称选择合适的函数来生成数据
        logtime = get(faker,'日志时间')
        values.append('\''+str(logtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 用户ID 根据名称选择合适的函数来生成数据
        userid = get(faker,'用户ID')
        values.append('\''+str(userid)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作类型 根据名称选择合适的函数来生成数据
        action = get(faker,'操作类型')
        values.append('\''+str(action)+'\'')
        
        # 用于外键补充
        
        
        
        # 模块名称 根据名称选择合适的函数来生成数据
        modulename = get(faker,'模块名称')
        values.append('\''+str(modulename)+'\'')
        
        # 用于外键补充
        
        
        
        # 描述信息 根据名称选择合适的函数来生成数据
        description = get(faker,'描述信息')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 操作结果 根据名称选择合适的函数来生成数据
        result = get(faker,'操作结果')
        values.append('\''+str(result)+'\'')
        
        # 用于外键补充
        
        
        
        # 地址 根据名称选择合适的函数来生成数据
        ipaddressip = get(faker,'地址')
        values.append('\''+str(ipaddressip)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联ID' not in cache:
            relatedid = get(faker,'关联ID')
        else:
            relatedid = faker.random.choice(list(cache.get('关联ID', )))
        
        # 用于外键补充
        
        if '关联ID' not in cache:
            cache['关联ID'] = set()
        cache['关联ID'].add(relatedid)
        values.append('\''+str(relatedid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报表配置表
def generate_repkwkwortconfigurations(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortconfigurations'
    fields_en = ['`repkwkwortid`', '`repkwkwortname`', '`description`', '`creatkwkwor`', '`createtime`', '`updatetime`', '`isactive`', '`frequency`', '`departmentid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报ID 根据名称选择合适的函数来生成数据
        repkwkwortid = get(faker,'报ID')
        values.append('\''+str(repkwkwortid)+'\'')
        
        # 用于外键补充
        
        
        
        # 报名称 根据名称选择合适的函数来生成数据
        repkwkwortname = get(faker,'报名称')
        values.append('\''+str(repkwkwortname)+'\'')
        
        # 用于外键补充
        
        
        
        # 报描述 根据名称选择合适的函数来生成数据
        description = get(faker,'报描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者 根据名称选择合适的函数来生成数据
        creatkwkwor = get(faker,'创建者')
        values.append('\''+str(creatkwkwor)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createtime = get(faker,'创建时间')
        values.append('\''+str(createtime)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatetime = get(faker,'更新时间')
        values.append('\''+str(updatetime)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否激活 根据名称选择合适的函数来生成数据
        isactive = get(faker,'是否激活')
        values.append('\''+str(isactive)+'\'')
        
        # 用于外键补充
        
        
        
        # 报告频率 根据名称选择合适的函数来生成数据
        frequency = get(faker,'报告频率')
        values.append('\''+str(frequency)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门ID 根据名称选择合适的函数来生成数据
        departmentid = get(faker,'部门ID')
        values.append('\''+str(departmentid)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报表导出记录表
def generate_repkwkwortexpkwkwortreckwkwords(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortexpkwkwortreckwkwords'
    fields_en = ['`id`', '`repkwkwortid`', '`expkwkworttime`', '`expkwkwortuser`', '`expkwkwortkwkwfkwkwormat`', '`filename`', '`filepath`', '`filesize`', '`status`', '`errkwkwormessage`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        if '报ID关联报' not in cache:
            repkwkwortid = get(faker,'报ID关联报')
        else:
            repkwkwortid = faker.random.choice(list(cache.get('报ID关联报', )))
        
        # 用于外键补充
        
        if '报ID关联报' not in cache:
            cache['报ID关联报'] = set()
        cache['报ID关联报'].add(repkwkwortid)
        values.append('\''+str(repkwkwortid)+'\'')
        
        
        
        # 导出时间 根据名称选择合适的函数来生成数据
        expkwkworttime = get(faker,'导出时间')
        values.append('\''+str(expkwkworttime)+'\'')
        
        # 用于外键补充
        
        
        
        # 导出用户 根据名称选择合适的函数来生成数据
        expkwkwortuser = get(faker,'导出用户')
        values.append('\''+str(expkwkwortuser)+'\'')
        
        # 用于外键补充
        
        
        
        # 导出格式如PDF 根据名称选择合适的函数来生成数据
        expkwkwortkwkwfkwkwormat = get(faker,'导出格式如PDF')
        values.append('\''+str(expkwkwortkwkwfkwkwormat)+'\'')
        
        # 用于外键补充
        
        
        
        # 文件名 根据名称选择合适的函数来生成数据
        filename = get(faker,'文件名')
        values.append('\''+str(filename)+'\'')
        
        # 用于外键补充
        
        
        
        # 文件存储路径 根据名称选择合适的函数来生成数据
        filepath = get(faker,'文件存储路径')
        values.append('\''+str(filepath)+'\'')
        
        # 用于外键补充
        
        
        
        # 文件大小单位KB 根据名称选择合适的函数来生成数据
        filesize = get(faker,'文件大小单位KB')
        values.append('\''+str(filesize)+'\'')
        
        # 用于外键补充
        
        
        
        # 导出状态如成功、失败 根据名称选择合适的函数来生成数据
        status = get(faker,'导出状态如成功、失败')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 错误信息如果导出失败 根据名称选择合适的函数来生成数据
        errkwkwormessage = get(faker,'错误信息如果导出失败')
        values.append('\''+str(errkwkwormessage)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报表模板字段表
def generate_repkwkworttemplatefields(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkworttemplatefields'
    fields_en = ['`templateid`', '`fieldname`', '`fieldtype`', '`kwkwisrequired`', '`kwkwdefaultvalue`', '`description`', '`skwkwortorder`', '`createdby`', '`createdat`', '`updatedby`', '`updatedat`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 模板ID 根据名称选择合适的函数来生成数据
        templateid = get(faker,'模板ID')
        values.append('\''+str(templateid)+'\'')
        
        # 用于外键补充
        
        
        
        # 字段名称 根据名称选择合适的函数来生成数据
        fieldname = get(faker,'字段名称')
        values.append('\''+str(fieldname)+'\'')
        
        # 用于外键补充
        
        
        
        # 字段类型 根据名称选择合适的函数来生成数据
        fieldtype = get(faker,'字段类型')
        values.append('\''+str(fieldtype)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否必填 根据名称选择合适的函数来生成数据
        kwkwisrequired = get(faker,'是否必填')
        values.append('\''+str(kwkwisrequired)+'\'')
        
        # 用于外键补充
        
        
        
        # 默认值 根据名称选择合适的函数来生成数据
        kwkwdefaultvalue = get(faker,'默认值')
        values.append('\''+str(kwkwdefaultvalue)+'\'')
        
        # 用于外键补充
        
        
        
        # 描述 根据名称选择合适的函数来生成数据
        description = get(faker,'描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 排序顺序 根据名称选择合适的函数来生成数据
        skwkwortorder = get(faker,'排序顺序')
        values.append('\''+str(skwkwortorder)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建人 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建人')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新人 根据名称选择合适的函数来生成数据
        updatedby = get(faker,'更新人')
        values.append('\''+str(updatedby)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报表字段类型表
def generate_repkwkwortfieldtypes(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortfieldtypes'
    fields_en = ['`id`', '`fieldname`', '`fieldtype`', '`maxlength`', '`kwkwisnullable`', '`kwkwdefaultvalue`', '`description`', '`createdby`', '`createdat`', '`updatedby`', '`updatedat`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        
        # 用于外键补充
        
        
        
        # 字段名称 根据名称选择合适的函数来生成数据
        fieldname = get(faker,'字段名称')
        values.append('\''+str(fieldname)+'\'')
        
        # 用于外键补充
        
        
        
        # 字段类型如VARCHAR 根据名称选择合适的函数来生成数据
        fieldtype = get(faker,'字段类型如VARCHAR')
        values.append('\''+str(fieldtype)+'\'')
        
        # 用于外键补充
        
        
        
        # 最大长度针对类型 根据名称选择合适的函数来生成数据
        maxlength = get(faker,'最大长度针对类型')
        values.append('\''+str(maxlength)+'\'')
        
        # 用于外键补充
        
        
        
        # 是否可为空是否 根据名称选择合适的函数来生成数据
        kwkwisnullable = get(faker,'是否可为空是否')
        values.append('\''+str(kwkwisnullable)+'\'')
        
        # 用于外键补充
        
        
        
        # 默认值 根据名称选择合适的函数来生成数据
        kwkwdefaultvalue = get(faker,'默认值')
        values.append('\''+str(kwkwdefaultvalue)+'\'')
        
        # 用于外键补充
        
        
        
        # 字段描述 根据名称选择合适的函数来生成数据
        description = get(faker,'字段描述')
        values.append('\''+str(description)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建人ID 根据名称选择合适的函数来生成数据
        createdby = get(faker,'创建人ID')
        values.append('\''+str(createdby)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建时间 根据名称选择合适的函数来生成数据
        createdat = get(faker,'创建时间')
        values.append('\''+str(createdat)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新人ID 根据名称选择合适的函数来生成数据
        updatedby = get(faker,'更新人ID')
        values.append('\''+str(updatedby)+'\'')
        
        # 用于外键补充
        
        
        
        # 更新时间 根据名称选择合适的函数来生成数据
        updatedat = get(faker,'更新时间')
        values.append('\''+str(updatedat)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 报表数据表
def generate_repkwkwortdata(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='repkwkwortdata'
    fields_en = ['`repkwkwortid`', '`repkwkwortname`', '`repkwkwortdate`', '`creatkwkwor`', '`department`', '`status`', '`content`', '`attachment`', '`lkwkwastupdatetime`', '`relateduserid`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 报ID 根据名称选择合适的函数来生成数据
        repkwkwortid = get(faker,'报ID')
        values.append('\''+str(repkwkwortid)+'\'')
        
        # 用于外键补充
        
        
        
        # 报名称 根据名称选择合适的函数来生成数据
        repkwkwortname = get(faker,'报名称')
        values.append('\''+str(repkwkwortname)+'\'')
        
        # 用于外键补充
        
        
        
        # 报日期 根据名称选择合适的函数来生成数据
        repkwkwortdate = get(faker,'报日期')
        values.append('\''+str(repkwkwortdate)+'\'')
        
        # 用于外键补充
        
        
        
        # 创建者 根据名称选择合适的函数来生成数据
        creatkwkwor = get(faker,'创建者')
        values.append('\''+str(creatkwkwor)+'\'')
        
        # 用于外键补充
        
        
        
        # 部门 根据名称选择合适的函数来生成数据
        department = get(faker,'部门')
        values.append('\''+str(department)+'\'')
        
        # 用于外键补充
        
        
        
        # 状态 根据名称选择合适的函数来生成数据
        status = get(faker,'状态')
        values.append('\''+str(status)+'\'')
        
        # 用于外键补充
        
        
        
        # 报内容 根据名称选择合适的函数来生成数据
        content = get(faker,'报内容')
        values.append('\''+str(content)+'\'')
        
        # 用于外键补充
        
        
        
        # 附件路径 根据名称选择合适的函数来生成数据
        attachment = get(faker,'附件路径')
        values.append('\''+str(attachment)+'\'')
        
        # 用于外键补充
        
        
        
        # 最后更新时间 根据名称选择合适的函数来生成数据
        lkwkwastupdatetime = get(faker,'最后更新时间')
        values.append('\''+str(lkwkwastupdatetime)+'\'')
        
        # 用于外键补充
        
        
        
        if '关联用户ID' not in cache:
            relateduserid = get(faker,'关联用户ID')
        else:
            relateduserid = faker.random.choice(list(cache.get('关联用户ID', )))
        
        # 用于外键补充
        
        if '关联用户ID' not in cache:
            cache['关联用户ID'] = set()
        cache['关联用户ID'].add(relateduserid)
        values.append('\''+str(relateduserid)+'\'')
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache

# 系统管理员
def generate_supermanager(faker, sql, out, database, cache=None):
    if cache is None:
        cache = dict()
    table='supermanager'
    fields_en = ['`username`']
    if '`id`' in fields_en:
        fields_en.remove('`id`')
    for i in range(100):
        values = list()
        
        
        # 管理员姓名 根据名称选择合适的函数来生成数据
        username = get(faker,'管理员姓名')
        values.append('\''+str(username)+'\'')
        
        # 用于外键补充
        
        
        out.write(sql.format(databasename=database,table=table,fields_en=','.join(fields_en),values=','.join(values)))
    return cache


def generate():
    cache = dict()
    with codecs.open('faker.sql', 'w', encoding='utf-8') as out:
        sql = 'insert into {databasename}.{table} ({fields_en}) values({values});\r\n'
        faker = Faker('zh_CN')
        database = 'vm779_2f88e95faa233d77'
        # 表名字符串,字段英文名

            
        # 用户表
        cache.update(generate_users(faker, sql, out, database,cache=cache))
        
        # 角色表
        cache.update(generate_roles(faker, sql, out, database,cache=cache))
        
        # 用户角色关联表
        cache.update(generate_userrolerelations(faker, sql, out, database,cache=cache))
        
        # 周报模板表
        cache.update(generate_weeklyrepkwkworttemplates(faker, sql, out, database,cache=cache))
        
        # 周报表
        cache.update(generate_weeklyrepkwkworts(faker, sql, out, database,cache=cache))
        
        # 报告周期表
        cache.update(generate_repkwkwortperiods(faker, sql, out, database,cache=cache))
        
        # 报告状态表
        cache.update(generate_repkwkwortstatuses(faker, sql, out, database,cache=cache))
        
        # 报告类型表
        cache.update(generate_repkwkworttypes(faker, sql, out, database,cache=cache))
        
        # 报告审核表
        cache.update(generate_repkwkwortaudits(faker, sql, out, database,cache=cache))
        
        # 审核意见表
        cache.update(generate_auditcomments(faker, sql, out, database,cache=cache))
        
        # 部门表
        cache.update(generate_departments(faker, sql, out, database,cache=cache))
        
        # 员工表
        cache.update(generate_employees(faker, sql, out, database,cache=cache))
        
        # 员工周报关联表
        cache.update(generate_employeeweeklyrepkwkwortrelations(faker, sql, out, database,cache=cache))
        
        # 通知表
        cache.update(generate_notkwkwifications(faker, sql, out, database,cache=cache))
        
        # 通知类型表
        cache.update(generate_notkwkwificationtypes(faker, sql, out, database,cache=cache))
        
        # 邮件发送记录表
        cache.update(generate_emaillogs(faker, sql, out, database,cache=cache))
        
        # 短信发送记录表
        cache.update(generate_smslogs(faker, sql, out, database,cache=cache))
        
        # 附件表
        cache.update(generate_attachments(faker, sql, out, database,cache=cache))
        
        # 附件类型表
        cache.update(generate_attachmenttypes(faker, sql, out, database,cache=cache))
        
        # 报告提交历史表
        cache.update(generate_repkwkwortsubmkwkwissionhkwkwistkwkwories(faker, sql, out, database,cache=cache))
        
        # 报告修改历史表
        cache.update(generate_repkwkwortmodkwkwificationhkwkwistkwkwories(faker, sql, out, database,cache=cache))
        
        # 报告评论表
        cache.update(generate_repkwkwortcomments(faker, sql, out, database,cache=cache))
        
        # 评论回复表
        cache.update(generate_commentreplies(faker, sql, out, database,cache=cache))
        
        # 报告评分表
        cache.update(generate_repkwkwortratkwkwings(faker, sql, out, database,cache=cache))
        
        # 评分标准表
        cache.update(generate_ratkwkwingcriteria(faker, sql, out, database,cache=cache))
        
        # 权限表
        cache.update(generate_permkwkwissions(faker, sql, out, database,cache=cache))
        
        # 权限角色关联表
        cache.update(generate_permkwkwissionrolerelations(faker, sql, out, database,cache=cache))
        
        # 系统日志表
        cache.update(generate_systemlogs(faker, sql, out, database,cache=cache))
        
        # 报表配置表
        cache.update(generate_repkwkwortconfigurations(faker, sql, out, database,cache=cache))
        
        # 报表导出记录表
        cache.update(generate_repkwkwortexpkwkwortreckwkwords(faker, sql, out, database,cache=cache))
        
        # 报表模板字段表
        cache.update(generate_repkwkworttemplatefields(faker, sql, out, database,cache=cache))
        
        # 报表字段类型表
        cache.update(generate_repkwkwortfieldtypes(faker, sql, out, database,cache=cache))
        
        # 报表数据表
        cache.update(generate_repkwkwortdata(faker, sql, out, database,cache=cache))
        
        # 系统管理员
        cache.update(generate_supermanager(faker, sql, out, database,cache=cache))
        

    from pymysql.connections import Connection
    from pymysql.cursors import DictCursor
    conn = Connection(port=3306, host='localhost', user='root', password=os.getenv('PM_UNIT_DATABASE_PSW', '123456'),
                      database='vm779_2f88e95faa233d77')
    with codecs.open('faker.sql', 'r', encoding='utf-8') as ins:
        with conn.cursor(DictCursor) as cursor:
            count = 0
            for i, sql in enumerate(ins.readlines()):
                try:
                    cursor.execute(sql)
                    cursor.fetchall()
                except Exception as e:
                    print('error: ', e)
                    print(sql)
                    continue
                count += 1
                    
        conn.commit()
        print('Generate OK,Insert Total:', count, '个记录', i+1, '个sql')
    os.remove('faker.sql')


if __name__ == '__main__':
    generate()

